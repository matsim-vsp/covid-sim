{"version":3,"file":"MultiDayViewer-DaQrvKWp.js","sources":["../../src/viz/multiday-agents/AgentGeometry.ts","../../src/viz/multiday-agents/shaderVert.vert?raw","../../src/viz/multiday-agents/shaderFrag.frag?raw","../../src/viz/multiday-agents/AnimationView.vue","../../node_modules/convert-seconds/index.js","../../src/components/PlaybackControls.vue","../../src/viz/multiday-agents/totalInfections.csv?raw","../../src/viz/multiday-agents/MultiDayViewer.vue"],"sourcesContent":["// Custom GLSL Shader for 1000x performance, we hope!\nimport * as THREE from 'three'\n\nimport { Agent, Infection } from '@/Globals'\n\nclass AgentGeometry extends THREE.BufferGeometry {\n  private midX: number\n  private midY: number\n  private tripsPerAgent: { [id: string]: number } = {}\n\n  constructor(agentList: { [id: string]: Agent }, midX: number, midY: number) {\n    super()\n\n    this.midX = midX\n    this.midY = midY\n\n    const point1: number[] = [] // x,y,time\n    const point2: number[] = [] // x,y,time\n\n    const infectionTimes: number[] = []\n    const infectionTypes: number[] = []\n\n    for (const id of Object.keys(agentList)) {\n      const agent = agentList[id]\n\n      this.buildWaypoints(agent, point1, point2, infectionTimes, infectionTypes)\n    }\n\n    this.setAttribute('position', new THREE.Float32BufferAttribute(point1, 3))\n    this.setAttribute('position2', new THREE.Float32BufferAttribute(point2, 3))\n\n    this.setAttribute('infectionTime', new THREE.Float32BufferAttribute(infectionTimes, 3))\n    this.setAttribute('infectionStatus', new THREE.Float32BufferAttribute(infectionTypes, 3))\n\n    const ram = 2 * 3 * point1.length + 2 * 3 * infectionTimes.length\n    console.log('######## GPU RAM:', ram)\n  }\n\n  updateInfections(infections: { [id: string]: Infection }) {\n    const infectionTimes: number[] = []\n    const infectionTypes: number[] = []\n\n    for (const id of Object.keys(infections)) {\n      const agent = infections[id]\n\n      const numTrips = this.tripsPerAgent[agent.id]\n\n      for (let i = 0; i < numTrips; i++) {\n        infectionTimes.push(...agent.dtime)\n        infectionTypes.push(...agent.d)\n      }\n    }\n\n    this.setAttribute('infectionTime', new THREE.Float32BufferAttribute(infectionTimes, 3))\n    this.setAttribute('infectionStatus', new THREE.Float32BufferAttribute(infectionTypes, 3))\n  }\n\n  private buildWaypoints(\n    agent: Agent,\n    point1: number[],\n    point2: number[],\n    infectionTimes: number[],\n    infectionTypes: number[]\n  ) {\n    const numWaypoints = agent.time.length\n    if (numWaypoints < 2) return // skip empty trips!\n\n    const infectTimes = AgentGeometry.buildInfectionTimes(agent)\n    const infectTypes = AgentGeometry.buildInfectionTypes(agent)\n\n    let numTrips = 0\n\n    // if first trip starts at nonzero, start them at zero anyway\n    if (agent.time[0] !== 0.0) {\n      const x = agent.path[0][0] - this.midX\n      const y = agent.path[0][1] - this.midY\n      const t = agent.time[0]\n      point1.push(x, y, 0)\n      point2.push(x, y, t)\n\n      infectionTimes.push(...infectTimes)\n      infectionTypes.push(...infectTypes)\n      numTrips++\n    }\n\n    // create trips for all waypoint combos\n    for (let i = 0; i < numWaypoints - 1; i++) {\n      const x = agent.path[i][0] - this.midX\n      const y = agent.path[i][1] - this.midY\n      const t = agent.time[i]\n      point1.push(x, y, t)\n\n      const x2 = agent.path[i + 1][0] - this.midX\n      const y2 = agent.path[i + 1][1] - this.midY\n      const t2 = agent.time[i + 1]\n      point2.push(x2, y2, t2)\n\n      infectionTimes.push(...infectTimes)\n      infectionTypes.push(...infectTypes)\n\n      numTrips++\n    }\n\n    // keep person on map at end of day\n    if (agent.time[numWaypoints - 1] !== 86400.0) {\n      const x = agent.path[numWaypoints - 1][0] - this.midX\n      const y = agent.path[numWaypoints - 1][1] - this.midY\n      const t = agent.time[numWaypoints - 1]\n      point1.push(x, y, t)\n      point2.push(x, y, 86400.0)\n\n      infectionTimes.push(...infectTimes)\n      infectionTypes.push(...infectTypes)\n\n      numTrips++\n    }\n\n    this.tripsPerAgent[agent.id] = numTrips\n  }\n\n  /**\n   * For mad efficiency, let's take advantage of the fact that in EpiSim\n   * there can only be one disease event per day for each agent;\n   * add start-day and end-of-day status changes, there is a max of THREE.\n   * So we can use a vec3 to push ALL infection events to all agents! Woot.\n   */\n  private static buildInfectionTimes(agent: Agent | Infection) {\n    switch (agent.dtime.length) {\n      case 0:\n        return [0.0, -1.0, -1.0]\n      case 1:\n        return [agent.dtime[0], -1.0, -1.0]\n      case 2:\n        return [agent.dtime[0], agent.dtime[1], -1.0]\n      case 3:\n      default:\n        return [agent.dtime[0], agent.dtime[1], agent.dtime[2]]\n    }\n  }\n\n  private static buildInfectionTypes(agent: Agent | Infection) {\n    switch (agent.d.length) {\n      case 0: // nothing? assume susceptible\n        return [0.0, -1.0, -1.0]\n      case 1:\n        return [agent.d[0], -1.0, -1.0]\n      case 2:\n        return [agent.d[0], agent.d[1], -1.0]\n      case 3:\n      default:\n        return [agent.d[0], agent.d[1], agent.d[2]]\n    }\n  }\n}\n\nexport default AgentGeometry\n","export default \"// vertex shader: agent positions\\n\\nuniform float simulationTime;\\nuniform float showSusceptible;\\n\\nattribute vec3 position2;  // x,y,t\\n\\n/**\\n * First, second, third infection statuses are in .xyz each\\n */\\nattribute vec3 infectionTime;\\nattribute vec3 infectionStatus;\\n\\n// this gets passed from vertex to fragment shader\\nvarying float myInfectionStatus;\\nvarying float skip;\\nvarying float atRest;\\n\\nfloat calculateStatus() {\\n\\n    // are we before the first infection state?\\n    if (simulationTime < infectionTime.x) return 0.0;\\n\\n    // is there only one infection state?\\n    if (infectionStatus.y == -1.0) return infectionStatus.x;\\n\\n    // are we before the second infection state?\\n    if (simulationTime < infectionTime.y) return infectionStatus.x;\\n\\n    // are there only two infection states?\\n    if (infectionTime.z == -1.0) return infectionStatus.y;\\n\\n    // are we before the third infection state?\\n    if (simulationTime < infectionTime.z) return infectionStatus.y;\\n\\n    // there can only be three infection states, and we are at the end\\n    return infectionStatus.z;\\n}\\n\\n\\nfloat calculateSize() {\\n\\n    float small = 2.0;\\n    float med = 5.0;\\n    float big = 8.0;\\n\\n    if (myInfectionStatus == 0.0) return small;\\n    else if (myInfectionStatus == 1.0) return big;\\n    else if (myInfectionStatus < 6.0) return med;\\n    return med;\\n}\\n\\nfloat calculateTimestep(in vec3 point1, in vec3 point2) {\\n\\n    atRest = 0.0;\\n\\n    if (point1 == point2) {\\n        atRest = 1.0;\\n        return 0.0;\\n    }\\n\\n    // position vars have time in the .z to save some space\\n    if (simulationTime < position.z) return 0.0;\\n    if (simulationTime > position2.z) return 1.0;\\n\\n    float progress = simulationTime - position.z;\\n    float duration = position2.z - position.z;\\n\\n    return progress / duration;\\n}\\n\\n\\nvec3 interpolate(in vec3 point1, in vec3 point2, in float timestepFraction) {\\n\\n    if (timestepFraction == 0.0) {\\n\\n        return point1;\\n\\n    } else if (timestepFraction >= 1.0 ) {\\n\\n        return point2;\\n\\n    } else {\\n\\n        vec3 direction = point2 - point1;\\n\\n        return (direction * timestepFraction) + point1;\\n    }\\n}\\n\\n\\nvoid main() {\\n\\n    // don't do anything if person is unaffected all day\\n    if (showSusceptible == 0.0 && infectionStatus.x == 0.0 && infectionStatus.y == -1.0) {\\n        gl_PointSize = 0.0;\\n        gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\\n        skip = 1.0;\\n        return;\\n    }\\n\\n    myInfectionStatus = calculateStatus();\\n\\n    // don't do anything if this trip is currently out of time bounds\\n    if (simulationTime < position.z || simulationTime > position2.z) {\\n        gl_PointSize = 0.0;\\n        gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\\n        skip = 1.0;\\n        return;\\n\\n    } else {\\n\\n        // figure out z-index based on infection status\\n        float zIndex = 0.2;\\n        if (myInfectionStatus == 0.0) zIndex = 0.1;\\n        else if (myInfectionStatus == 1.0) zIndex = 0.3;\\n        else if (myInfectionStatus == 2.0) zIndex = 0.4;\\n\\n        // unpack coords from position buffers - x,y,time. Deal w/ z later\\n        vec3 point1 = vec3(position.xy, zIndex);\\n        vec3 point2 = vec3(position2.xy, zIndex);\\n\\n        float timestepFraction = calculateTimestep(point1, point2);\\n\\n        vec3 newPosition = interpolate(point1, point2, timestepFraction);\\n\\n        gl_PointSize = calculateSize();\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\\n\\n        skip = 0.0;\\n   }\\n}\\n\"","export default \"// fragment shader: pixel colors\\n\\nuniform float simulationTime;\\nuniform vec3 cSusceptible;\\nuniform vec3 cInfectedButNotContagious;\\nuniform vec3 cContagious;\\nuniform vec3 cSymptomatic;\\nuniform vec3 cSeriouslyIll;\\nuniform vec3 cCritical;\\nuniform vec3 cRecovered;\\n\\n// passed in from vertex shader:\\nvarying float myInfectionStatus;\\nvarying float skip;\\nvarying float atRest;\\n\\n\\nvec4 getColor() {\\n\\n    if (myInfectionStatus == 0.0) {\\n        return vec4(cSusceptible, 1.0);  // susceptible; not moving\\n\\n    } else if (myInfectionStatus == 1.0) {\\n\\n        return vec4(cInfectedButNotContagious, 1.0);  // infected; cyan\\n\\n    } else if (myInfectionStatus == 2.0) {\\n\\n        return vec4(cContagious, 1.0);  // contagious; red\\n\\n    } else if (myInfectionStatus == 3.0) {\\n\\n        return vec4(cSymptomatic, 1.0);\\n\\n    } else if (myInfectionStatus == 4.0) {\\n\\n        return vec4(cSeriouslyIll, 1.0);\\n\\n    } else if (myInfectionStatus == 5.0) {\\n\\n        return vec4(cCritical, 1.0);\\n    }\\n    return vec4(cRecovered, 1.0);\\n}\\n\\n\\nvoid main() {\\n    // don't do anything if this trip is currently out of time bounds\\n    if (skip == 1.0) {\\n\\n        gl_FragColor = vec4(0,0,0,0);\\n\\n    } else {\\n\\n        gl_FragColor = getColor();\\n\\n    }\\n}\\n\\n/******\\nuniform vec3 color;\\nuniform vec3 selectedColor;\\nuniform float timestepFraction;\\n\\nuniform sampler2D triangle;\\nuniform sampler2D circle;\\n\\nvarying float vRotation;\\nvarying float vShouldInterpolate;\\nvarying float vIsSelected;\\n\\nvec2 rotateCoordinates() {\\n    mat2 rotationMatrix = mat2(cos(vRotation), sin(vRotation), -sin(vRotation), cos(vRotation));\\n\\n    vec2 centerBasedCoord = vec2(gl_PointCoord.x -0.5, gl_PointCoord.y - 0.5);\\n    vec2 centerBasedRotatedCoord = centerBasedCoord * rotationMatrix;\\n    return centerBasedRotatedCoord + 0.5;\\n}\\n\\nvec4 getColor() {\\n\\n    vec4 result;\\n\\n    if (vIsSelected >= 1.0) {\\n        result = vec4(selectedColor, 1.0);\\n    }\\n    else {\\n        result = vec4(color, 1.0);\\n    }\\n    return result;\\n}\\n\\nvoid main() {\\n\\n    vec4 opaqueColor = getColor();\\n\\n    if (vShouldInterpolate >= 1.0) {\\n        vec2 coord = rotateCoordinates();\\n        gl_FragColor = opaqueColor * texture2D(triangle, coord);\\n    } else {\\n        opaqueColor.a = 1.0 - timestepFraction;\\n        gl_FragColor = opaqueColor * texture2D(circle, gl_PointCoord);\\n    }\\n\\n    if ( gl_FragColor.a < ALPHATEST ) discard;\\n}\\n******/\\n\"","<template lang=\"pug\">\n#anim-container(:style=\"{backgroundColor: isDarkMode ? 'black' : '#ccccc4'}\")\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js'\nimport ZipLoader from 'zip-loader'\nimport * as THREE from 'three'\n\nimport store from '@/store'\nimport { Agent, ColorScheme, ColorSet, Infection, Health, DARK_MODE, LIGHT_MODE } from '@/Globals'\nimport AgentGeometry from './AgentGeometry'\nimport EventBus from '@/EventBus.vue'\n\nimport { MapControls } from '@/util/OrbitControl'\n\nimport vertexShader from './shaderVert.vert?raw'\nimport fragmentShader from './shaderFrag.frag?raw'\n\nexport default defineComponent({\n  name: 'AnimationView',\n  props: {\n    speed: { type: Number, required: true },\n    day: { type: Number, required: true },\n    showSusceptible: { type: Boolean, required: true },\n  },\n  data: () => {\n    const initColors = store.state.colorScheme == ColorScheme.DarkMode ? DARK_MODE : LIGHT_MODE\n\n    return {\n      wasSimulationRunning: true,\n      networkLayers: [] as THREE.LineSegments[],\n      agentMaterial: null as null | THREE.ShaderMaterial,\n      agentGeometry: null as null | AgentGeometry,\n      tempStreamBuffer: '',\n\n      timeFactor: 600.0,\n      timeDirection: 1,\n      vertexShader,\n      fragmentShader,\n      networkFilename: 'network.zip',\n      state: store.state,\n\n      colors: initColors,\n      isDarkMode: store.state.colorScheme === ColorScheme.DarkMode,\n\n      // keep track of time - current time in the simulation itself\n      simulationTime: 0,\n\n      // Count the seconds since the clock started running;\n      // Every pause resets the anim clock to zero!\n      animationTimeSinceUnpaused: 0,\n      clock: new THREE.Clock(false), // do not autostart clock!\n\n      // when to next update the visible clock\n      nextClockUpdateTime: 0,\n\n      scene: new THREE.Scene(),\n      renderer: new THREE.WebGLRenderer({ antialias: true }),\n      camera: null as null | THREE.PerspectiveCamera,\n\n      // eslint-disable-next-line\n      container: {} as any,\n\n      // eslint-disable-next-line\n      cameraControls: {} as any,\n\n      linkMaterial: new THREE.LineBasicMaterial({ color: initColors.links }),\n\n      xRange: [1e25, -1e25],\n      yRange: [1e25, -1e25],\n\n      // berlin\n      midpointX: 4595000,\n      midpointY: 5820000,\n\n      tripList: {} as { [id: string]: Agent },\n      infectionList: {} as { [id: string]: Infection },\n\n      allTripsHaveBegun: false,\n\n      publicPath: '/',\n    }\n  },\n\n  watch: {\n    speed() {\n      this.$store.commit('setSimulation', true)\n\n      const newDirection = this.speed < 0 ? -1 : 1\n      if (newDirection === this.timeDirection) return\n\n      // switch everything backwards\n      this.clock.stop()\n      this.clock = new THREE.Clock(false)\n\n      this.timeDirection = newDirection\n\n      this.clock.start()\n      this.animationTimeSinceUnpaused = 0\n      requestAnimationFrame(this.moveCameraWhilePaused)\n      console.log('done flip')\n    },\n\n    'state.isRunning'() {\n      if (this.state.isRunning) {\n        // pressed play.\n        this.clock.start()\n        requestAnimationFrame(this.animate)\n      } else {\n        // pressed pause\n        this.clock.stop()\n        this.clock = new THREE.Clock(false)\n\n        // Reset animation frame-clock to zero\n        this.animationTimeSinceUnpaused = 0\n        requestAnimationFrame(this.moveCameraWhilePaused)\n      }\n    },\n\n    'state.colorScheme'() {\n      this.colors = store.state.colorScheme == ColorScheme.LightMode ? LIGHT_MODE : DARK_MODE\n      this.isDarkMode = this.state.colorScheme === ColorScheme.DarkMode\n\n      // background\n      this.scene.background = new THREE.Color(this.colors.background)\n\n      // agents\n      if (this.agentMaterial) {\n        this.agentMaterial.uniforms['cSusceptible'].value = new THREE.Color(this.colors.susceptible)\n        this.agentMaterial.uniforms['cInfectedButNotContagious'].value = new THREE.Color(\n          this.colors.infectedButNotContagious\n        )\n        this.agentMaterial.uniforms['cContagious'].value = new THREE.Color(this.colors.contagious)\n        this.agentMaterial.uniforms['cSymptomatic'].value = new THREE.Color(this.colors.symptomatic)\n        this.agentMaterial.uniforms['cSeriouslyIll'].value = new THREE.Color(\n          this.colors.seriouslyIll\n        )\n        this.agentMaterial.uniforms['cCritical'].value = new THREE.Color(this.colors.critical)\n        this.agentMaterial.uniforms['cRecovered'].value = new THREE.Color(this.colors.recovered)\n      }\n\n      // road network\n      // rebuild the streets\n      const net = this.scene.getObjectByName('network')\n      if (net) this.scene.remove(net)\n\n      this.linkMaterial.dispose()\n      this.linkMaterial = new THREE.LineBasicMaterial({ color: this.colors.links })\n\n      for (const networkLayer of this.networkLayers) {\n        const name = networkLayer.name\n        const mesh = this.scene.getObjectByName(name)\n        if (mesh) this.scene.remove(mesh)\n\n        const newLayer = new THREE.LineSegments(networkLayer.geometry, this.linkMaterial)\n        newLayer.name = name\n        this.scene.add(newLayer)\n      }\n    },\n\n    async day() {\n      console.log('------------------ DAY', this.day)\n\n      // pause the clock\n      this.clock.stop()\n      this.animationTimeSinceUnpaused = 0\n      this.clock = new THREE.Clock(false)\n\n      this.updateAgentAttributesForDay(this.day)\n\n      // and let er go again\n      // this.clock.start()\n\n      // requestAnimationFrame(this.animate)\n      // ^^^^ this was a bug! added an extra animate() call per frame, every\n      // time user switched days.  Compounded misery!\n    },\n\n    showSusceptible() {\n      if (!this.agentGeometry) return\n      if (!this.agentMaterial) return\n\n      const show = this.showSusceptible ? 1.0 : 0.0\n      this.agentMaterial.uniforms['showSusceptible'].value = show\n      this.agentMaterial.uniformsNeedUpdate = true\n    },\n  },\n\n  mounted() {\n    this.setInitialClockTime()\n    this.setupSimulation()\n    this.setupDragListener()\n\n    window.addEventListener('resize', this.onWindowResize, false)\n    document.addEventListener('visibilitychange', this.handleVisibilityChange, false)\n  },\n\n  beforeDestroy() {\n    // reset the sim to zero\n    this.exitSimulation()\n\n    window.removeEventListener('resize', this.onWindowResize)\n    document.removeEventListener('visibilityChange', this.handleVisibilityChange)\n    EventBus.$off(EventBus.DRAG)\n\n    // Some types of THREE objects must be manually destroyed\n    // https://threejs.org/docs/index.html#manual/en/introduction/How-to-dispose-of-objects\n    if (this.agentMaterial) this.agentMaterial.dispose()\n    if (this.agentGeometry) this.agentGeometry.dispose()\n\n    for (const networkLayer of this.networkLayers) {\n      networkLayer.geometry.dispose()\n    }\n\n    this.linkMaterial.dispose()\n    this.scene.dispose()\n  },\n\n  methods: {\n    setInitialClockTime() {\n      // set specified time, if we got one\n      const secondsParam = '' + this.$route.query.start\n      if (secondsParam && !Number.isNaN(parseInt(secondsParam))) {\n        const seconds = parseInt(secondsParam)\n        if (seconds >= 0 || seconds < 86400) {\n          this.simulationTime = seconds\n          this.setVisibleClock()\n          this.$nextTick()\n        }\n      }\n    },\n\n    handleVisibilityChange() {\n      console.log('window visibility changed!! hidden:', document.hidden)\n      this.$store.commit('setSimulation', document.hidden ? false : true)\n    },\n\n    setupDragListener() {\n      const parent = this\n      EventBus.$on(EventBus.DRAG, function (seconds: number) {\n        if (seconds === -1) {\n          // start drag\n          parent.wasSimulationRunning = parent.state.isRunning\n          parent.$store.commit('setSimulation', false)\n        } else if (seconds === -2) {\n          // end drag\n          parent.$store.commit('setSimulation', parent.wasSimulationRunning)\n        } else {\n          // dragging\n          parent.simulationTime = parent.nextClockUpdateTime = seconds\n          parent.animate()\n        }\n      })\n    },\n\n    exitSimulation() {\n      this.clock = new THREE.Clock(false)\n      this.simulationTime = 0\n      this.nextClockUpdateTime = 0\n      this.timeDirection = 1\n\n      while (this.scene.children.length) {\n        this.scene.remove(this.scene.children[0])\n      }\n    },\n\n    onWindowResize() {\n      this.container = document.getElementById('anim-container')\n      if (!this.container || !this.camera) return\n\n      const canvas = this.renderer.domElement\n\n      this.camera.aspect = this.container.clientWidth / this.container.clientHeight\n      this.camera.updateProjectionMatrix()\n\n      this.renderer.setSize(this.container.clientWidth, this.container.clientHeight)\n    },\n\n    async setupSimulation() {\n      this.$store.commit('setStatusMessage', 'loading agents')\n\n      await this.$nextTick()\n      await this.loadTrips()\n\n      this.initScene()\n\n      // this can happen in the background\n      this.addNetworkToScene()\n    },\n\n    startSimulation() {\n      // let UI know we're about to begin!\n      this.$emit('loaded', true)\n\n      if (!this.state.isShowingHelp) {\n        this.clock.start()\n        this.animate()\n        this.$store.commit('setSimulation', true)\n      }\n    },\n\n    async networkLayerAdder(nodes: any[], netlinks: any[], index: number) {\n      const batchSize = 20000\n\n      if (index > netlinks.length) {\n        this.$store.commit('setStatusMessage', '')\n        this.startSimulation()\n        return\n      }\n\n      const links: THREE.BufferGeometry[] = []\n      const start = index\n      const end = index + batchSize > netlinks.length ? netlinks.length : index + batchSize\n\n      for (let i = start; i < end; i++) {\n        const link = netlinks[i]\n        const from = new THREE.Vector3(nodes[link.from_node].x, nodes[link.from_node].y, 0)\n        const to = new THREE.Vector3(nodes[link.to_node].x, nodes[link.to_node].y, 0)\n        const segment = new THREE.BufferGeometry().setFromPoints([from, to])\n\n        links.push(segment)\n      }\n\n      const mergedLines = BufferGeometryUtils.mergeBufferGeometries(links)\n      const networkMesh = new THREE.LineSegments(mergedLines, this.linkMaterial)\n\n      networkMesh.name = 'network' + index\n\n      this.scene.add(networkMesh)\n      if (this.camera) this.renderer.render(this.scene, this.camera)\n\n      this.networkLayers.push(networkMesh)\n      mergedLines.dispose()\n\n      // start the next batch. 1ms timeout required so UI doesn't freeze\n      const nextIndex = index + batchSize\n      setTimeout(() => {\n        this.networkLayerAdder(nodes, netlinks, nextIndex)\n      }, 1)\n    },\n\n    async addNetworkToScene() {\n      console.log('loading network', this.networkFilename)\n      this.networkLayers = []\n\n      // load zipfile\n      const zipLoader = new ZipLoader(this.publicPath + this.networkFilename)\n      await zipLoader.load()\n\n      // extract json\n      const network = zipLoader.extractAsJSON('network.json')\n\n      // eslint-disable-next-line\n      const nodes: any = {}\n      for (const node of network.nodes) {\n        nodes[node.node_id] = { x: node.x - this.midpointX, y: node.y - this.midpointY }\n      }\n\n      console.log('network has links:', network.links.length)\n\n      this.networkLayerAdder(nodes, network.links, 0)\n      // this.startSimulation()\n    },\n\n    async loadTrips() {\n      console.log('loading agent trips')\n\n      const zpath = this.publicPath + 'v3-anim/trips.json'\n\n      console.log(zpath)\n\n      const response = await fetch(zpath)\n      if (!response.body) return\n\n      this.tripList = {}\n      const body = await response.text()\n\n      for (const ndjson of body.split('\\n')) {\n        if (!!ndjson) {\n          const agent: Agent = JSON.parse(ndjson)\n          this.tripList[agent.id] = agent\n        }\n      }\n      console.log('--Done reading trips.')\n      this.finishedLoadingTrips()\n    },\n\n    async updateAgentAttributesForDay(day: number) {\n      console.log('loading infections for day', day)\n\n      const dayString = ('00' + this.day).slice(-3)\n      const zpath = this.publicPath + 'v3-anim/' + dayString + '-infections.json'\n\n      console.log(zpath)\n      // we're going to do this async and streamy!\n      const response = await fetch(zpath)\n      if (!response.body) return\n\n      this.tempStreamBuffer = ''\n      this.infectionList = {}\n\n      const decoder = new TextDecoder('utf-8')\n      const reader = response.body.getReader()\n\n      // no need to await - will run in background\n      this.loopInfectionReader(reader, decoder)\n    },\n\n    loopInfectionReader(reader: ReadableStreamDefaultReader, decoder: TextDecoder) {\n      reader.read().then(({ value, done }) => {\n        if (done) {\n          if (this.tempStreamBuffer) this.processNewlyReadInfection(this.tempStreamBuffer)\n          console.log('--Done reading infections.')\n          this.finishedLoadingInfections()\n        } else {\n          this.processNDJSONInfectionChunk(value, decoder)\n\n          // go back for another chunk\n          this.loopInfectionReader(reader, decoder)\n        }\n      })\n    },\n\n    processNewlyReadInfection(ndjson: string) {\n      const inf: Infection = JSON.parse(ndjson)\n      // I THINK we don't need this?\n      // if (inf.path.length === 0) return\n\n      this.infectionList[inf.id] = inf\n    },\n\n    processNDJSONInfectionChunk(value: Uint8Array, decoder: TextDecoder, splitOn: string = '\\n') {\n      const chunk = decoder.decode(value)\n      this.tempStreamBuffer += chunk\n      const parts = this.tempStreamBuffer.split(splitOn)\n\n      parts.slice(0, -1).forEach(ndjson => {\n        this.processNewlyReadInfection(ndjson)\n      })\n      this.tempStreamBuffer = parts[parts.length - 1]\n    },\n\n    finishedLoadingInfections() {\n      if (!this.agentGeometry) return\n\n      this.agentGeometry.updateInfections(this.infectionList)\n      this.clock.start()\n    },\n\n    finishedLoadingTrips() {\n      if (this.agentGeometry) this.agentGeometry.dispose()\n      this.agentGeometry = new AgentGeometry(this.tripList, this.midpointX, this.midpointY)\n\n      // maybe we already loaded a new day\n      if (Object.keys(this.infectionList).length > 0) {\n        this.agentGeometry.updateInfections(this.infectionList)\n      }\n\n      if (!this.agentMaterial)\n        this.agentMaterial = new THREE.ShaderMaterial({\n          uniforms: {\n            simulationTime: { value: 0.0 },\n            showSusceptible: { value: this.showSusceptible },\n            colorLinks: { value: new THREE.Color(this.colors.links) },\n\n            cSusceptible: { value: new THREE.Color(this.colors.susceptible) },\n            cContagious: { value: new THREE.Color(this.colors.contagious) },\n            cInfectedButNotContagious: {\n              value: new THREE.Color(this.colors.infectedButNotContagious),\n            },\n            cSymptomatic: {\n              value: new THREE.Color(this.colors.symptomatic),\n            },\n            cSeriouslyIll: {\n              value: new THREE.Color(this.colors.seriouslyIll),\n            },\n            cCritical: {\n              value: new THREE.Color(this.colors.critical),\n            },\n            cRecovered: {\n              value: new THREE.Color(this.colors.recovered),\n            },\n          },\n          vertexShader: this.vertexShader,\n          fragmentShader: this.fragmentShader,\n          blending: THREE.NoBlending,\n          depthTest: true,\n          transparent: true,\n        })\n\n      const points = new THREE.Points(this.agentGeometry, this.agentMaterial)\n      points.name = 'agents'\n\n      // zap the old points, if we have them\n      const agentLayer = this.scene.getObjectByName('agents')\n      if (agentLayer) this.scene.remove(agentLayer)\n      this.scene.add(points)\n\n      if (this.camera) this.renderer.render(this.scene, this.camera)\n      this.$store.commit('setStatusMessage', 'loading network')\n\n      console.log('added points')\n    },\n\n    initScene() {\n      console.log('hereee 5-----')\n\n      this.container = document.getElementById('anim-container')\n      if (!this.container) return\n\n      console.log('hereee 0-----')\n      this.scene.background = new THREE.Color(this.colors.background)\n\n      this.renderer.setSize(this.container.clientWidth, this.container.clientHeight)\n      this.container.appendChild(this.renderer.domElement)\n\n      const near = 1\n      const far = 100000\n\n      this.camera = new THREE.PerspectiveCamera(\n        170,\n        this.container.clientWidth / this.container.clientHeight,\n        near,\n        far\n      )\n\n      //@ts-ignore\n      this.cameraControls = new MapControls(this.camera, this.renderer.domElement)\n\n      this.cameraControls.enablePan = true\n      this.cameraControls.screenSpacePanning = true\n      this.cameraControls.enableZoom = true\n      this.cameraControls.enableRotate = false\n\n      this.camera.position.set(0, 0, 1500)\n      this.camera.lookAt(0, 0, -1)\n\n      this.cameraControls.update()\n\n      this.renderer.render(this.scene, this.camera)\n\n      console.log('--init complete!')\n    },\n\n    moveCameraWhilePaused() {\n      if (!this.camera) return\n\n      if (!this.state.isRunning) {\n        this.renderer.render(this.scene, this.camera)\n        this.cameraControls.update()\n        requestAnimationFrame(this.moveCameraWhilePaused) // endless animation loop\n      }\n    },\n\n    setVisibleClock() {\n      const hour = Math.floor(this.simulationTime / 3600)\n      const minute = Math.floor(this.simulationTime / 60) % 60\n      this.$store.commit(\n        'setClock',\n        (hour < 10 ? '0' : '') + hour + (minute < 10 ? ':0' : ':') + minute\n      )\n    },\n\n    animate() {\n      // update all the time & clock tickers\n      const elapsedTicks = this.clock.getElapsedTime()\n\n      const timeDelta =\n        this.timeFactor * this.speed * (elapsedTicks - this.animationTimeSinceUnpaused)\n\n      this.animationTimeSinceUnpaused = elapsedTicks\n\n      this.simulationTime = this.simulationTime + timeDelta\n\n      // are we done?\n      if (this.simulationTime < 0.0) {\n        this.$store.commit('setSimulation', false)\n        this.simulationTime = 0\n      } else if (this.simulationTime > 86400) {\n        this.$store.commit('setSimulation', false)\n        this.simulationTime = 86400 - 1\n      }\n\n      // tell agents to move their butts\n      if (this.agentMaterial)\n        this.agentMaterial.uniforms['simulationTime'].value = this.simulationTime\n\n      // update statusbar, clocks, etc\n      if (\n        this.simulationTime * this.timeDirection >=\n        this.nextClockUpdateTime * this.timeDirection\n      ) {\n        this.setVisibleClock()\n        this.nextClockUpdateTime += 60 * this.timeDirection\n        EventBus.$emit(EventBus.SIMULATION_PERCENT, this.simulationTime / 86400)\n      }\n\n      if (this.camera) this.renderer.render(this.scene, this.camera)\n      this.cameraControls.update()\n\n      if (this.state.isRunning) requestAnimationFrame(this.animate) // endless animation loop\n    },\n  },\n})\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n@use '@/styles.scss' as *;\n\n#anim-container {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: -1;\n}\n</style>\n","'use strict';\n\nmodule.exports = function (seconds) {\n    seconds = parseInt(seconds, 10);\n\n    if (isNaN(seconds)) {\n        throw new TypeError('Invalid value sent to convert-seconds');\n    }\n    var results = {};\n    results.hours = Math.floor(seconds / 60 / 60);\n    results.minutes = Math.floor((seconds / 60) % 60);\n    results.seconds = Math.floor(seconds % 60);\n\n    return results;\n};\n","<template lang=\"pug\">\n.my-vue-component\n  b-slider.slider(v-model=\"sliderValue\"\n    v-bind=\"sliderOptions\"\n    @dragging=\"dragging\"\n    @dragstart=\"dragStart\"\n    @dragend=\"dragEnd\")\n\n  .buttons\n    .playpause(@click='toggleSimulation')\n      i.button-icon.fa.fa-1x.fa-pause(v-if=\"state.isRunning\")\n      i.button-icon.fa.fa-1x.fa-play(v-else)\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nimport timeConvert from 'convert-seconds'\n\nimport store from '@/store'\nimport EventBus from '@/EventBus.vue'\n\nconst maxSliderVal = 100000.0\n\nconst getSecondsFromSlider = (oneToTenThousand: number) => {\n  let seconds = (oneToTenThousand / maxSliderVal) * 86400\n  if (seconds === 86400) seconds = 86400 - 1\n  return seconds\n}\n\nconst convertSecondsToClockTimeMinutes = (index: number) => {\n  const seconds = getSecondsFromSlider(index)\n\n  try {\n    const hms = timeConvert(seconds)\n    const minutes = ('00' + hms.minutes).slice(-2)\n    return `${hms.hours}:${minutes}`\n  } catch (e) {\n    return '00:00'\n  }\n}\n\nexport default defineComponent({\n  name: 'PlaybackControls',\n  components: {},\n\n  data: () => {\n    return {\n      state: store.state,\n      sliderValue: 0,\n      maxSliderVal,\n      sliderOptions: {\n        min: 0,\n        max: maxSliderVal - 1,\n        clickable: false,\n        dotSize: 28,\n        duration: 0,\n        lazy: true,\n        tooltip: true,\n        size: 'is-large',\n        'tooltip-always': true,\n        'tooltip-placement': 'top',\n        'custom-formatter': convertSecondsToClockTimeMinutes,\n        // (v: number) => {\n        //   return convertSecondsToClockTimeMinutes(v)\n        // },\n      },\n    }\n  },\n  methods: {\n    onKeyPressed(ev: KeyboardEvent) {\n      if (ev.code === 'Space') this.toggleSimulation()\n    },\n\n    toggleSimulation() {\n      this.$emit('click')\n    },\n\n    dragStart() {\n      console.log('start')\n      EventBus.$emit(EventBus.DRAG, -1)\n    },\n\n    dragEnd() {\n      console.log('end')\n      EventBus.$emit(EventBus.DRAG, -2)\n    },\n\n    dragging(value: any) {\n      EventBus.$emit(EventBus.DRAG, getSecondsFromSlider(value))\n    },\n  },\n\n  mounted() {\n    // this.sliderOptions['tooltip-formatter'] = convertSecondsToClockTimeMinutes\n\n    EventBus.$on(EventBus.SIMULATION_PERCENT, (time: number) => {\n      this.sliderValue = Math.floor(this.maxSliderVal * time)\n    })\n    window.addEventListener('keyup', this.onKeyPressed)\n  },\n\n  beforeDestroy() {\n    EventBus.$off(EventBus.SIMULATION_PERCENT)\n    window.removeEventListener('keyup', this.onKeyPressed)\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@use '@/styles.scss' as *;\n\n.my-vue-component {\n  display: flex;\n  flex-direction: row;\n}\n\n.slider {\n  margin: auto 0;\n  flex: 1;\n  font-weight: bold;\n}\n\n.buttons {\n  margin: 0 0 0 2rem;\n}\n\n.playpause {\n  width: 3rem;\n  height: 3rem;\n  border-radius: 50%;\n  color: white;\n  background-color: $themeColor;\n  display: flex;\n  text-align: center;\n  // box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  cursor: pointer;\n  pointer-events: auto;\n}\n\n.playpause:hover {\n  background-color: #39a8f1;\n  border: 2px solid white;\n}\n\n.button-icon {\n  margin: auto auto;\n}\n\n@media only screen and (max-width: 640px) {\n  #vue-component {\n    display: flex;\n    flex-direction: row;\n  }\n\n  .slider {\n    flex: 1;\n    margin: auto 0rem;\n  }\n\n  .buttons {\n    margin: 0.25rem 0 0 2rem;\n  }\n}\n</style>\n","export default \"time\\tday\\tnSusceptible\\tnInfectedButNotContagious\\tnContagious\\tnShowingSymptoms\\tnSeriouslySick\\tnCritical\\tnTotalInfected\\tnInfectedCumulative\\tnRecovered\\tnInQuarantine\\tdistrict\\r\\n86400.0\\t1\\t4696700\\t1000\\t0\\t0\\t0\\t0\\t1000\\t1000\\t0\\t0\\tunknown\\r\\n172800.0\\t2\\t4696700\\t1000\\t0\\t0\\t0\\t0\\t1000\\t1000\\t0\\t0\\tunknown\\r\\n259200.0\\t3\\t4696700\\t1000\\t0\\t0\\t0\\t0\\t1000\\t1000\\t0\\t0\\tunknown\\r\\n345600.0\\t4\\t4696700\\t0\\t1000\\t0\\t0\\t0\\t1000\\t1000\\t0\\t0\\tunknown\\r\\n432000.0\\t5\\t4692400\\t4300\\t1000\\t0\\t0\\t0\\t5300\\t5300\\t0\\t0\\tunknown\\r\\n518400.0\\t6\\t4692100\\t4600\\t100\\t900\\t0\\t0\\t5600\\t5600\\t0\\t900\\tunknown\\r\\n604800.0\\t7\\t4692100\\t4600\\t100\\t900\\t0\\t0\\t5600\\t5600\\t0\\t900\\tunknown\\r\\n691200.0\\t8\\t4692100\\t300\\t4400\\t900\\t0\\t0\\t5600\\t5600\\t0\\t900\\tunknown\\r\\n777600.0\\t9\\t4673300\\t18800\\t4700\\t900\\t0\\t0\\t24400\\t24400\\t0\\t900\\tunknown\\r\\n864000.0\\t10\\t4671100\\t21000\\t1000\\t4400\\t200\\t0\\t26600\\t26600\\t0\\t4600\\tunknown\\r\\n950400.0\\t11\\t4671000\\t21100\\t700\\t4700\\t200\\t0\\t26700\\t26700\\t0\\t4900\\tunknown\\r\\n1036800.0\\t12\\t4671000\\t2300\\t19500\\t4700\\t200\\t0\\t26700\\t26700\\t0\\t4900\\tunknown\\r\\n1123200.0\\t13\\t4538600\\t132500\\t21700\\t4700\\t200\\t0\\t159100\\t159100\\t0\\t4900\\tunknown\\r\\n1209600.0\\t14\\t4518700\\t152300\\t7000\\t19300\\t400\\t0\\t179000\\t179000\\t0\\t19700\\tunknown\\r\\n1296000.0\\t15\\t4517600\\t153400\\t5100\\t21200\\t400\\t0\\t180100\\t180100\\t0\\t21600\\tunknown\\r\\n1382400.0\\t16\\t4516600\\t22000\\t137400\\t20500\\t400\\t0\\t180300\\t181100\\t800\\t21600\\tunknown\\r\\n1468800.0\\t17\\t3846800\\t671900\\t157300\\t20500\\t400\\t0\\t850100\\t850900\\t800\\t20900\\tunknown\\r\\n1555200.0\\t18\\t3751300\\t766300\\t54100\\t124000\\t1200\\t0\\t945600\\t946400\\t800\\t125200\\tunknown\\r\\n1641600.0\\t19\\t3740100\\t776500\\t39200\\t139800\\t1100\\t200\\t956800\\t957600\\t800\\t141100\\tunknown\\r\\n1728000.0\\t20\\t3735700\\t111100\\t707700\\t137000\\t1100\\t200\\t957100\\t962000\\t4900\\t141800\\tunknown\\r\\n1814400.0\\t21\\t2671600\\t1079700\\t802400\\t137500\\t1100\\t200\\t2020900\\t2026100\\t5200\\t139100\\tunknown\\r\\n1900800.0\\t22\\t2560300\\t1179800\\t274000\\t670300\\t7900\\t200\\t2132200\\t2137400\\t5200\\t678400\\tunknown\\r\\n1987200.0\\t23\\t2544200\\t1191500\\t199700\\t747900\\t6900\\t2100\\t2148100\\t2153500\\t5400\\t757100\\tunknown\\r\\n2073600.0\\t24\\t2537100\\t134500\\t1251300\\t742300\\t6800\\t2300\\t2137200\\t2160600\\t23400\\t765400\\tunknown\\r\\n2160000.0\\t25\\t1940100\\t620200\\t1358900\\t743900\\t6800\\t2300\\t2732100\\t2757600\\t25500\\t754800\\tunknown\\r\\n2246400.0\\t26\\t1873000\\t671200\\t524300\\t1564800\\t36500\\t2300\\t2799100\\t2824700\\t25600\\t1603600\\tunknown\\r\\n2332800.0\\t27\\t1863100\\t674000\\t441600\\t1649900\\t34000\\t9300\\t2808800\\t2834600\\t25800\\t1693400\\tunknown\\r\\n2419200.0\\t28\\t1855200\\t84900\\t997300\\t1565300\\t33300\\t10300\\t2691100\\t2842500\\t151400\\t1706400\\tunknown\\r\\n2505600.0\\t29\\t1600100\\t272900\\t1054700\\t1556200\\t33300\\t10300\\t2927400\\t3097600\\t170200\\t1614600\\tunknown\\r\\n2592000.0\\t30\\t1551600\\t311500\\t589100\\t1985900\\t78100\\t10300\\t2974900\\t3146100\\t171200\\t2074900\\tunknown\\r\\n2678400.0\\t31\\t1542900\\t312300\\t545200\\t2032500\\t69900\\t21900\\t2981800\\t3154800\\t173000\\t2125900\\tunknown\\r\\n2764800.0\\t32\\t1536900\\t63200\\t661900\\t1530000\\t71000\\t21500\\t2347600\\t3160800\\t813200\\t2132500\\tunknown\\r\\n2851200.0\\t33\\t1388500\\t163100\\t688400\\t1461000\\t71300\\t21400\\t2405200\\t3309200\\t904000\\t1627700\\tunknown\\r\\n2937600.0\\t34\\t1343900\\t199000\\t490300\\t1633400\\t94800\\t21400\\t2438900\\t3353800\\t914900\\t1757800\\tunknown\\r\\n3024000.0\\t35\\t1334700\\t202200\\t457700\\t1665000\\t83500\\t28500\\t2436900\\t3363000\\t926100\\t1787200\\tunknown\\r\\n3110400.0\\t36\\t1330300\\t58200\\t385700\\t865400\\t89700\\t21900\\t1420900\\t3367400\\t1946500\\t1783900\\tunknown\\r\\n3196800.0\\t37\\t1240800\\t103100\\t403600\\t784800\\t90600\\t21100\\t1403200\\t3456900\\t2053700\\t982200\\tunknown\\r\\n3283200.0\\t38\\t1202700\\t132000\\t292100\\t879900\\t100700\\t21300\\t1426000\\t3495000\\t2069000\\t1014300\\tunknown\\r\\n3369600.0\\t39\\t1196800\\t133500\\t260400\\t906600\\t71400\\t23400\\t1395300\\t3500900\\t2105600\\t1036600\\tunknown\\r\\n3456000.0\\t40\\t1193400\\t47400\\t219800\\t463000\\t77900\\t12400\\t820500\\t3504300\\t2683800\\t1009600\\tunknown\\r\\n3542400.0\\t41\\t1134100\\t68600\\t239000\\t417200\\t79300\\t10900\\t815000\\t3563600\\t2748600\\t556700\\tunknown\\r\\n3628800.0\\t42\\t1110100\\t86700\\t170400\\t475900\\t86000\\t10800\\t829800\\t3587600\\t2757800\\t580200\\tunknown\\r\\n3715200.0\\t43\\t1106400\\t87000\\t141200\\t498500\\t41700\\t12600\\t781000\\t3591300\\t2810300\\t602600\\tunknown\\r\\n3801600.0\\t44\\t1104600\\t29500\\t145000\\t308500\\t44900\\t5900\\t533800\\t3593100\\t3059300\\t557300\\tunknown\\r\\n3888000.0\\t45\\t1074400\\t35700\\t155700\\t275400\\t44700\\t5700\\t517200\\t3623300\\t3106100\\t361700\\tunknown\\r\\n3974400.0\\t46\\t1064200\\t42200\\t111100\\t311600\\t48400\\t5400\\t518700\\t3633500\\t3114800\\t372300\\tunknown\\r\\n4060800.0\\t47\\t1061800\\t42800\\t92700\\t323800\\t26500\\t6000\\t491800\\t3635900\\t3144100\\t384800\\tunknown\\r\\n4147200.0\\t48\\t1061300\\t13100\\t89300\\t215200\\t25800\\t4500\\t347900\\t3636400\\t3288500\\t359300\\tunknown\\r\\n4233600.0\\t49\\t1047300\\t16900\\t88200\\t184000\\t25900\\t3900\\t318900\\t3650400\\t3331500\\t246900\\tunknown\\r\\n4320000.0\\t50\\t1042000\\t19800\\t64600\\t198100\\t29000\\t4000\\t315500\\t3655700\\t3340200\\t238800\\tunknown\\r\\n4406400.0\\t51\\t1040100\\t21200\\t57100\\t200600\\t19100\\t5100\\t303100\\t3657600\\t3354500\\t238100\\tunknown\\r\\n4492800.0\\t52\\t1039800\\t7500\\t52700\\t132900\\t18300\\t3600\\t215000\\t3657900\\t3442900\\t226500\\tunknown\\r\\n4579200.0\\t53\\t1030700\\t11300\\t49400\\t105500\\t18500\\t3300\\t188000\\t3667000\\t3479000\\t155200\\tunknown\\r\\n4665600.0\\t54\\t1028200\\t11900\\t38400\\t111100\\t20300\\t3100\\t184800\\t3669500\\t3484700\\t138800\\tunknown\\r\\n4752000.0\\t55\\t1026900\\t12900\\t33700\\t112500\\t13700\\t3500\\t176300\\t3670800\\t3494500\\t138500\\tunknown\\r\\n4838400.0\\t56\\t1026800\\t3900\\t28500\\t70700\\t12200\\t2900\\t118200\\t3670900\\t3552700\\t131200\\tunknown\\r\\n4924800.0\\t57\\t1022700\\t5500\\t26200\\t53000\\t12100\\t2300\\t99100\\t3675000\\t3575900\\t86000\\tunknown\\r\\n5011200.0\\t58\\t1022000\\t4900\\t19300\\t57200\\t12200\\t2300\\t95900\\t3675700\\t3579800\\t74900\\tunknown\\r\\n5097600.0\\t59\\t1021800\\t5000\\t16800\\t57700\\t9100\\t2200\\t90800\\t3675900\\t3585100\\t73900\\tunknown\\r\\n5184000.0\\t60\\t1021800\\t900\\t14800\\t35300\\t8100\\t1100\\t60200\\t3675900\\t3615700\\t69900\\tunknown\\r\\n5270400.0\\t61\\t1020800\\t1200\\t12200\\t28800\\t8000\\t800\\t51000\\t3676900\\t3625900\\t44600\\tunknown\\r\\n5356800.0\\t62\\t1020800\\t1000\\t8500\\t30000\\t8400\\t700\\t48600\\t3676900\\t3628300\\t40800\\tunknown\\r\\n5443200.0\\t63\\t1020800\\t1000\\t7800\\t30200\\t4900\\t800\\t44700\\t3676900\\t3632200\\t39700\\tunknown\\r\\n5529600.0\\t64\\t1020800\\t0\\t6200\\t19300\\t3900\\t300\\t29700\\t3676900\\t3647200\\t36000\\tunknown\\r\\n5616000.0\\t65\\t1020100\\t700\\t4900\\t15700\\t3900\\t100\\t25300\\t3677600\\t3652300\\t23500\\tunknown\\r\\n5702400.0\\t66\\t1020100\\t700\\t3600\\t15000\\t4000\\t100\\t23400\\t3677600\\t3654200\\t20600\\tunknown\\r\\n5788800.0\\t67\\t1020100\\t700\\t3500\\t14800\\t2200\\t100\\t21300\\t3677600\\t3656300\\t19100\\tunknown\\r\\n5875200.0\\t68\\t1020100\\t0\\t2600\\t7800\\t1800\\t100\\t12300\\t3677600\\t3665300\\t17100\\tunknown\\r\\n5961600.0\\t69\\t1019700\\t400\\t2300\\t5600\\t1600\\t100\\t10000\\t3678000\\t3668000\\t9700\\tunknown\\r\\n6048000.0\\t70\\t1019700\\t400\\t1400\\t5200\\t1600\\t100\\t8700\\t3678000\\t3669300\\t7800\\tunknown\\r\\n6134400.0\\t71\\t1019700\\t400\\t1400\\t5100\\t1100\\t100\\t8100\\t3678000\\t3669900\\t6900\\tunknown\\r\\n6220800.0\\t72\\t1019700\\t0\\t900\\t2100\\t800\\t0\\t3800\\t3678000\\t3674200\\t6300\\tunknown\\r\\n6307200.0\\t73\\t1019600\\t100\\t800\\t1500\\t700\\t0\\t3100\\t3678100\\t3675000\\t2900\\tunknown\\r\\n6393600.0\\t74\\t1019600\\t100\\t400\\t1600\\t800\\t0\\t2900\\t3678100\\t3675200\\t2500\\tunknown\\r\\n6480000.0\\t75\\t1019600\\t100\\t400\\t1600\\t300\\t0\\t2400\\t3678100\\t3675700\\t2400\\tunknown\\r\\n6566400.0\\t76\\t1019600\\t0\\t400\\t700\\t300\\t0\\t1400\\t3678100\\t3676700\\t1900\\tunknown\\r\\n6652800.0\\t77\\t1019600\\t0\\t400\\t700\\t300\\t0\\t1400\\t3678100\\t3676700\\t1000\\tunknown\\r\\n6739200.0\\t78\\t1019600\\t0\\t300\\t700\\t400\\t0\\t1400\\t3678100\\t3676700\\t1100\\tunknown\\r\\n6825600.0\\t79\\t1019600\\t0\\t300\\t700\\t200\\t0\\t1200\\t3678100\\t3676900\\t1100\\tunknown\\r\\n6912000.0\\t80\\t1019600\\t0\\t100\\t300\\t200\\t0\\t600\\t3678100\\t3677500\\t900\\tunknown\\r\\n6998400.0\\t81\\t1019600\\t0\\t100\\t300\\t200\\t0\\t600\\t3678100\\t3677500\\t500\\tunknown\\r\\n7084800.0\\t82\\t1019600\\t0\\t100\\t300\\t200\\t0\\t600\\t3678100\\t3677500\\t500\\tunknown\\r\\n7171200.0\\t83\\t1019600\\t0\\t100\\t300\\t200\\t0\\t600\\t3678100\\t3677500\\t500\\tunknown\\r\\n7257600.0\\t84\\t1019600\\t0\\t0\\t100\\t200\\t0\\t300\\t3678100\\t3677800\\t500\\tunknown\\r\\n7344000.0\\t85\\t1019600\\t0\\t0\\t100\\t200\\t0\\t300\\t3678100\\t3677800\\t300\\tunknown\\r\\n7430400.0\\t86\\t1019600\\t0\\t0\\t100\\t200\\t0\\t300\\t3678100\\t3677800\\t300\\tunknown\\r\\n7516800.0\\t87\\t1019600\\t0\\t0\\t100\\t100\\t0\\t200\\t3678100\\t3677900\\t300\\tunknown\\r\\n7603200.0\\t88\\t1019600\\t0\\t0\\t0\\t100\\t0\\t100\\t3678100\\t3678000\\t200\\tunknown\\r\\n7689600.0\\t89\\t1019600\\t0\\t0\\t0\\t100\\t0\\t100\\t3678100\\t3678000\\t100\\tunknown\\r\\n7776000.0\\t90\\t1019600\\t0\\t0\\t0\\t100\\t0\\t100\\t3678100\\t3678000\\t100\\tunknown\\r\\n7862400.0\\t91\\t1019600\\t0\\t0\\t0\\t0\\t0\\t0\\t3678100\\t3678100\\t100\\tunknown\\r\\n7948800.0\\t92\\t1019600\\t0\\t0\\t0\\t0\\t0\\t0\\t3678100\\t3678100\\t0\\tunknown\\r\\n\"","<template lang=\"pug\">\n#v3-app\n  animation-view.anim(@loaded=\"toggleLoaded\" :speed=\"speed\" :day=\"newDay\" :showSusceptible=\"showSusceptible\")\n\n  modal-markdown-dialog#help-dialog(\n    title='COVID-19 virus spreading'\n    md='@/assets/animation-helptext.md'\n    :buttons=\"[`Let's go!`]\"\n    :class=\"{'is-active': showHelp}\"\n    @click=\"clickedCloseHelp()\"\n  )\n\n  .nav\n    p.big.time(v-if=\"!state.statusMessage\") Berlin: Outbreak Day {{ newDay+1 }}\n    p.big.day {{ state.statusMessage }}\n    p.big.time {{ state.clock }}\n\n  .side-section\n    .day-switchers\n      .day-button.switchers(:class=\"{dark: isDarkMode}\"\n                   @click=\"dayStep(-1)\" title=\"Previous day\")\n                   i.fa.fa-1x.fa-arrow-left\n      .day-button.switchers(:class=\"{dark: isDarkMode}\"\n                   @click=\"dayStep(1)\" title=\"Next day\")\n                   i.fa.fa-1x.fa-arrow-right\n\n    .day-button-grid\n      .day-button(v-for=\"day of Array.from(Array(numDays+1).keys()).slice(1)\"\n                  :style=\"{borderBottom: newDay == day-1 ? 'none' : '2px solid ' + colorLookup(day-1)}\"\n                  :class=\"{currentday: newDay == day-1, dark: isDarkMode}\"\n                  :key=\"day\" @click=\"switchDay(day-1)\" :title=\"'Day ' + day\") {{ day }}\n\n  .right-side\n    .morestuff(v-if=\"isLoaded\")\n      b-slider.speed-slider(v-model=\"speedSlider\"\n        :min=\"0\" :max=\"speedStops.length-1\"\n        :dotSize=\"20\"\n        :tooltip=\"true\"\n        tooltip-placement=\"bottom\"\n        :custom-formatter=\"val => speedStops[val] + 'x'\"\n        @input=\"speed = speedStops[speedSlider]\"\n      )\n        b-slider-tick(v-for=\"tick in speedStops\" :key=\"tick\" :value=\"tick\")\n\n      p.speed-label(\n        :style=\"{'color': textColor.text}\") {{ speed }}x speed\n\n      toggle-button(@change=\"toggleSusceptible\"\n                    :value=\"showSusceptible\"\n                    :sync=\"true\"\n                    :labels=\"true\"\n                    color=\"#4b7cc4\"\n                    :speed=\"150\")\n\n      p.speed-label(\n        :style=\"{color: textColor.text}\") Show susceptible\n\n\n  playback-controls.playback-stuff(v-if=\"isLoaded\" @click='toggleSimulation')\n\n  .extra-buttons(v-if=\"isLoaded\")\n    .help-button(@click='clickedHelp' title=\"info\")\n      i.help-button-text.fa.fa-1x.fa-question\n    img.theme-button(src=\"@/assets/images/darkmode.jpg\" @click='rotateColors' title=\"dark/light theme\")\n\n  .legend(:class=\"{dark: isDarkMode}\")\n    p(:style=\"{color: isDarkMode ? '#fff' : '#000'}\") Legend:\n    .legend-items\n      p.legend-item(v-for=\"status in legendBits\" :key=\"status.label\" :style=\"{color: status.color}\") {{ status.label }}\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nimport Papaparse from '@simwrapper/papaparse'\nimport { ToggleButton } from 'vue-js-toggle-button'\n\nimport store from '@/store'\nimport AnimationView from './AnimationView.vue'\nimport ModalMarkdownDialog from '@/components/ModalMarkdownDialog.vue'\nimport PlaybackControls from '@/components/PlaybackControls.vue'\nimport { ColorScheme, LIGHT_MODE, DARK_MODE } from '@/Globals'\n\nimport totalInfections from './totalInfections.csv?raw'\n\nexport default defineComponent({\n  name: 'MultiDayViewer',\n  components: { AnimationView, ModalMarkdownDialog, PlaybackControls, ToggleButton },\n  data: () => {\n    return {\n      numDays: 90,\n      newDay: 0,\n      state: store.state,\n      isDarkMode: store.state.colorScheme === ColorScheme.DarkMode,\n      isLoaded: false,\n      showHelp: false,\n      showSusceptible: true,\n      totalInfections,\n      speedStops: [-10, -5, -2, -1, -0.5, -0.25, 0, 0.25, 0.5, 1, 2, 5, 10],\n      speed: 1,\n      speedSlider: 9, // 9th element of speedStops above = 1.0\n      legendBits: [] as any[],\n      dayColors: {} as { [day: number]: string },\n    }\n  },\n\n  watch: {\n    'state.colorScheme'() {\n      this.isDarkMode = store.state.colorScheme === ColorScheme.DarkMode\n      this.updateLegendColors()\n      this.setCubeColors()\n    },\n  },\n\n  mounted() {\n    this.$store.commit('setFullScreen', true)\n\n    this.showHelp = !this.state.sawAgentAnimationHelp\n    this.$store.commit('setShowingHelp', this.showHelp)\n\n    // start the sim right away if the dialog isn't showing\n    this.$store.commit('setSimulation', !this.showHelp)\n\n    this.setInitialDay()\n\n    // make nice colors\n    this.setCubeColors()\n    this.updateLegendColors()\n  },\n\n  beforeDestroy() {\n    this.$store.commit('setFullScreen', false)\n    this.$store.commit('setSimulation', false)\n  },\n\n  computed: {\n    textColor() {\n      const lightmode = {\n        text: '#3498db',\n        bg: '#eeeef480',\n      }\n      const darkmode = {\n        text: 'white',\n        bg: '#181518aa',\n      }\n      return this.state.colorScheme === ColorScheme.DarkMode ? darkmode : lightmode\n    },\n  },\n\n  methods: {\n    updateLegendColors() {\n      const theme = this.state.colorScheme == ColorScheme.LightMode ? LIGHT_MODE : DARK_MODE\n\n      this.legendBits = [\n        { label: 'susceptible', color: theme.susceptible },\n        { label: 'latently infected', color: theme.infectedButNotContagious },\n        { label: 'contagious', color: theme.contagious },\n        { label: 'symptomatic', color: theme.symptomatic },\n        { label: 'seriously ill', color: theme.seriouslyIll },\n        { label: 'critical', color: theme.critical },\n        { label: 'recovered', color: theme.recovered },\n      ]\n    },\n\n    setInitialDay() {\n      // set specified day, if we got one\n      const param = '' + this.$route.query.day\n      if (param && Number.isFinite(param)) {\n        const day = parseInt(param)\n        if (day >= 1 || day < this.numDays) {\n          this.newDay = day - 1 // stupid 0day\n          this.$nextTick()\n        }\n      }\n    },\n\n    toggleSimulation() {\n      this.$store.commit('setSimulation', !this.state.isRunning)\n\n      // ok so, many times I mashed the play/pause wondering why things wouldn't\n      // start moving. Turns out a 0x speed is not very helpful! Help the user\n      // out and switch the speed up if they press play.\n      if (this.state.isRunning && this.speed === 0.0) this.speed = 1.0\n    },\n\n    async setCubeColors() {\n      const dailyTotals = Papaparse.parse(this.totalInfections, {\n        header: true,\n        dynamicTyping: true,\n        skipEmptyLines: true,\n      }).data\n\n      const careAbout = [\n        'nInfectedButNotContagious',\n        'nContagious',\n        'nShowingSymptoms',\n        'nSeriouslySick',\n        'nCritical',\n        'nRecovered',\n      ]\n\n      const theme = this.state.colorScheme == ColorScheme.LightMode ? LIGHT_MODE : DARK_MODE\n\n      // loop for each row in infection summary data\n      // -- which doesn't have for day 0! But obviously no one is infected yet\n      this.dayColors[0] = theme.infectedButNotContagious\n\n      for (const row of dailyTotals) {\n        let count = 0\n        let largestCol = 'nix'\n\n        for (const col of careAbout) {\n          if (row[col] > count) {\n            count = row[col]\n            largestCol = col\n          }\n        }\n\n        const day = row.day\n\n        switch (largestCol) {\n          case 'nSusceptible':\n            this.dayColors[day] = theme.susceptible\n            break\n          case 'nInfectedButNotContagious':\n            this.dayColors[day] = theme.infectedButNotContagious\n            break\n          case 'nContagious':\n            this.dayColors[day] = theme.contagious\n            break\n          case 'nShowingSymptoms':\n            this.dayColors[day] = theme.symptomatic\n            break\n          case 'nSeriouslySick':\n            this.dayColors[day] = theme.seriouslyIll\n            break\n          case 'nCritical':\n            this.dayColors[day] = theme.critical\n            break\n          case 'nRecovered':\n            this.dayColors[day] = theme.recovered\n            break\n          default:\n            this.dayColors[day] = '#dddddd'\n            break\n        }\n      }\n    },\n\n    colorLookup(day: number): string {\n      return this.dayColors[day]\n    },\n\n    clickedHelp() {\n      console.log('HEEELP!')\n      this.$store.commit('setSimulation', false)\n      this.showHelp = true\n      this.$store.commit('setShowingHelp', this.showHelp)\n    },\n\n    clickedCloseHelp() {\n      this.showHelp = false\n      this.$store.commit('setShowingHelp', this.showHelp)\n      // only show the help once\n      this.$store.commit('setSawAgentAnimationHelp', true)\n      this.$store.commit('setSimulation', true)\n    },\n\n    toggleSusceptible() {\n      this.showSusceptible = !this.showSusceptible\n    },\n\n    switchDay(day: number) {\n      const param = '' + (day + 1)\n      this.$router.replace({ query: { day: param } })\n      this.$nextTick()\n\n      this.newDay = day\n    },\n\n    dayStep(step: number) {\n      let day = this.newDay + step\n\n      // don't be stupid\n      if (day < 0) return\n      if (day >= this.numDays) return\n\n      this.switchDay(day)\n    },\n\n    toggleLoaded(loaded: boolean) {\n      this.isLoaded = loaded\n    },\n\n    rotateColors() {\n      this.$store.commit('rotateColors')\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@use '@/styles.scss' as *;\n\n#v3-app {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n\n  width: 100%;\n  pointer-events: none;\n  display: grid;\n  margin-top: 3rem;\n  grid-template-columns: 1fr 6rem;\n  grid-template-rows: auto auto 1fr auto auto auto;\n  grid-template-areas:\n    'hd              hd'\n    'days     rightside'\n    'days             .'\n    'days  extrabuttons'\n    'playback  playback'\n    'legend      legend';\n}\n\n#help-dialog {\n  padding: 2rem 2rem;\n  pointer-events: auto;\n  z-index: 20;\n}\n\nimg.theme-button {\n  opacity: 1;\n  margin: 1rem 0 0.5rem auto;\n  background-color: black;\n  border-radius: 50%;\n  border: 2px solid #648cb4;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  width: 3rem;\n  height: 3rem;\n  cursor: pointer;\n  pointer-events: auto;\n}\n\nimg.theme-button:hover {\n  border: 2px solid white;\n}\n\n#top-hover-panel img.theme-button:hover {\n  cursor: pointer;\n  background-color: white;\n}\n\n.nav {\n  grid-area: hd;\n  display: flex;\n  flex-direction: row;\n  margin: 0 0;\n  padding: 0 0.5rem 0 1rem;\n  background-color: #228855dd;\n\n  a {\n    font-weight: bold;\n    color: white;\n    text-decoration: none;\n\n    &.router-link-exact-active {\n      color: white;\n    }\n  }\n\n  p {\n    margin: auto 0.5rem auto 0;\n    padding: 0 0;\n    color: white;\n  }\n}\n\n.legend {\n  margin-left: 1rem;\n  grid-area: legend;\n  display: flex;\n  flex-direction: row;\n  font-weight: bold;\n  font-size: 1rem;\n  background-color: #ddc;\n}\n\n.legend-items {\n  flex: 1;\n  display: flex;\n  flex-direction: row;\n  margin-left: 2rem;\n  justify-content: space-evenly;\n}\n\n.legend-item {\n  margin-right: 0.25rem;\n}\n\n.legend.dark {\n  background-color: #181518;\n}\n\n.speed-slider {\n  flex: 1;\n  width: 100%;\n  margin: 0.5rem 0rem 0.25rem 0;\n  pointer-events: auto;\n  font-weight: bold;\n  z-index: 100000;\n}\n\n.big {\n  color: red;\n  opacity: 0.85;\n  padding: 0rem 0;\n  margin-top: 1rem;\n  margin-bottom: 0.5rem;\n  font-size: 2rem;\n  line-height: 3.75rem;\n  font-weight: bold;\n}\n\n.day {\n  flex: 1;\n}\n\n.controls {\n  display: flex;\n  flex-direction: row;\n}\n\n.left-side {\n  flex: 1;\n  background-color: green;\n  margin-left: 0.5rem;\n  margin-right: auto;\n}\n\n.right-side {\n  grid-area: rightside;\n  font-size: 0.8rem;\n  display: flex;\n  flex-direction: column;\n  margin-right: 1rem;\n  text-align: right;\n  padding: 0 0;\n  color: white;\n  pointer-events: auto;\n}\n\n.logo {\n  flex: 1;\n  margin-top: auto;\n  margin-left: auto;\n  margin-bottom: none;\n}\n\n.side-section {\n  grid-area: days;\n  margin: 0.6rem auto auto 0.5rem;\n  padding: 0rem 1rem 0 0.5rem;\n}\n\n.day-button-grid {\n  margin: 0.5rem auto 0 0;\n  margin-right: auto;\n  display: flex;\n  flex-wrap: wrap;\n  padding: 1px 1px;\n  width: 10rem;\n}\n\n.day-button {\n  margin: 1px 1px;\n  background-color: #eeeeee;\n  font-size: 0.7rem;\n  width: 1.2rem;\n  height: 1.2rem;\n  text-align: center;\n  cursor: pointer;\n  pointer-events: auto;\n}\n\n.day-button:hover,\n.day-button:active {\n  background-color: white;\n  font-weight: bold;\n}\n\n.day-button.dark {\n  background-color: #222222;\n  color: #bbb;\n  border: 1px solid black;\n}\n\n.day-button.dark:hover,\n.day-button.dark:active {\n  background-color: black;\n  border: 2px solid $themeColor;\n  font-weight: bold;\n}\n\n.day-button.currentday {\n  background-color: $themeColor;\n  font-weight: bold;\n  color: white;\n}\n\n.help-button {\n  width: 3rem;\n  height: 3rem;\n  border-radius: 50%;\n  color: white;\n  background-color: $themeColor;\n  display: flex;\n  text-align: center;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  margin: 0 0 0 auto;\n  cursor: pointer;\n  pointer-events: auto;\n}\n\n.help-button:hover {\n  background-color: #39a8f1;\n  border: 2px solid white;\n}\n\n.help-button-text {\n  margin: auto auto;\n}\n\n.playback-stuff {\n  grid-area: playback;\n  padding: 0rem 1rem 1rem 2rem;\n  pointer-events: auto;\n}\n\n.extra-buttons {\n  margin-left: auto;\n  margin-right: 1rem;\n  grid-area: extrabuttons;\n}\n\n.anim {\n  grid-column: 1 / 3;\n  grid-row: 2 / 7;\n  pointer-events: auto;\n}\n\n.label {\n  margin-right: 1rem;\n  color: white;\n  text-align: left;\n  line-height: 1.1rem;\n  width: min-content;\n}\n\n.speed-label {\n  font-weight: bold;\n  margin-bottom: 1rem;\n  margin-top: 0.25rem;\n}\n\n.day-switchers {\n  display: flex;\n  flex-direction: row;\n}\n\n.switchers {\n  margin-right: 0.3rem;\n  width: 1.8rem;\n  height: 1.8rem;\n  padding-top: 0.2rem;\n  font-size: 1rem;\n}\n\n@media only screen and (max-width: 640px) {\n  .nav {\n    padding: 0rem 0.5rem;\n  }\n\n  .right-side {\n    margin-right: 1rem;\n  }\n\n  .big {\n    padding: 0 0rem;\n    margin-top: 0.5rem;\n    font-size: 1.3rem;\n    line-height: 2rem;\n  }\n\n  .legend {\n    margin-left: 0.5rem;\n    display: flex;\n    flex-direction: row;\n    font-size: 0.7rem;\n  }\n\n  .legend-items {\n    flex: 1;\n    margin-left: 2rem;\n    display: grid;\n    grid-auto-flow: row;\n    grid-template-columns: repeat(4, auto);\n    font-size: 0.7rem;\n  }\n\n  .side-section {\n    margin-left: 0;\n  }\n\n  .extra-buttons {\n    margin-right: 1rem;\n  }\n  .playback-stuff {\n    padding-right: 1rem;\n  }\n\n  .day-button-grid {\n    width: 4.4rem;\n  }\n\n  .day-button {\n    color: transparent;\n    background-color: #eeeeeedd;\n    font-size: 0.7rem;\n    width: 1rem;\n    height: 0.5rem;\n    text-align: center;\n    //padding-top: 2px;\n    cursor: pointer;\n    pointer-events: auto;\n  }\n\n  .day-button.dark {\n    color: transparent;\n    background-color: #222222cc;\n    border: 1px solid black;\n  }\n\n  .day-button.currentday {\n    color: transparent;\n    background-color: white;\n  }\n\n  .switchers {\n    width: 1.5rem;\n    height: 1.5rem;\n    color: black;\n  }\n  .switchers.dark {\n    color: white;\n    background-color: #223;\n  }\n}\n</style>\n"],"names":["AgentGeometry","THREE.BufferGeometry","agentList","midX","midY","__publicField","point1","point2","infectionTimes","infectionTypes","id","agent","THREE.Float32BufferAttribute","ram","infections","numTrips","i","numWaypoints","infectTimes","infectTypes","x","y","t","x2","y2","t2","vertexShader","fragmentShader","_sfc_main$2","defineComponent","initColors","store","ColorScheme","DARK_MODE","LIGHT_MODE","THREE.Clock","THREE.Scene","THREE.WebGLRenderer","THREE.LineBasicMaterial","newDirection","THREE.Color","net","networkLayer","name","mesh","newLayer","THREE.LineSegments","show","EventBus","secondsParam","seconds","parent","nodes","netlinks","index","links","start","end","link","from","THREE.Vector3","to","segment","mergedLines","BufferGeometryUtils","networkMesh","nextIndex","zipLoader","ZipLoader","network","node","zpath","response","body","ndjson","day","dayString","decoder","reader","value","done","inf","splitOn","chunk","parts","THREE.ShaderMaterial","THREE.NoBlending","points","THREE.Points","agentLayer","near","far","THREE.PerspectiveCamera","MapControls","hour","minute","elapsedTicks","timeDelta","convertSeconds","results","maxSliderVal","getSecondsFromSlider","oneToTenThousand","convertSecondsToClockTimeMinutes","hms","timeConvert","minutes","_sfc_main$1","ev","time","totalInfections","_sfc_main","AnimationView","ModalMarkdownDialog","PlaybackControls","ToggleButton","lightmode","darkmode","theme","param","dailyTotals","Papaparse","careAbout","row","count","largestCol","col","step","loaded"],"mappings":"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","x_google_ignoreList":[4]}