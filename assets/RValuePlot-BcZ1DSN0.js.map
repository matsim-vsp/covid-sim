{"version":3,"file":"RValuePlot-BcZ1DSN0.js","sources":["../../src/assets/berlin-hospital.csv?raw","../../src/assets/munich-hospital.csv?raw","../../src/assets/jakarta-hospital.csv?raw","../../src/assets/cologne-hospital.csv?raw","../../src/views/v2/HospitalizationPlot.vue","../../src/views/v2/RValuePlot.vue"],"sourcesContent":["export default \"Datum,Gemeldete Fälle,Stationäre Behandlung,Intensivmedizin,gestorben\\r\\n01.03.2020,1,1,0,0\\r\\n02.03.2020,3,1,0,0\\r\\n03.03.2020,5,4,0,0\\r\\n04.03.2020,8,4,0,0\\r\\n05.03.2020,20,4,0,0\\r\\n06.03.2020,25,4,0,0\\r\\n07.03.2020,26,4,0,0\\r\\n08.03.2020,37,4,0,0\\r\\n09.03.2020,59,4,0,0\\r\\n10.03.2020,93,4,0,0\\r\\n11.03.2020,136,5,0,0\\r\\n12.03.2020,183,5,0,0\\r\\n13.03.2020,244,8,0,0\\r\\n14.03.2020,273,15,0,0\\r\\n15.03.2020,298,16,0,0\\r\\n16.03.2020,361,20,3,0\\r\\n17.03.2020,456,21,4,0\\r\\n18.03.2020,601,28,9,0\\r\\n19.03.2020,779,43,15,0\\r\\n20.03.2020,947,44,18,1\\r\\n21.03.2020,1074,39,14,1\\r\\n22.03.2020,1144,41,20,1\\r\\n23.03.2020,1302,47,22,2\\r\\n24.03.2020,1501,112,26,3\\r\\n25.03.2020,1749,208,38,4\\r\\n26.03.2020,2033,235,46,8\\r\\n27.03.2020,2238,261,53,8\\r\\n28.03.2020,2434,300,64,9\\r\\n29.03.2020,2521,312,70,11\\r\\n30.03.2020,2684,381,84,13\\r\\n31.03.2020,2897,380,92,15\\r\\n01.04.2020,3084,479,104,17\\r\\n02.04.2020,3309,458,116,20\\r\\n03.04.2020,3547,473,124,22\\r\\n04.04.2020,3655,502,127,24\\r\\n05.04.2020,3729,507,126,26\\r\\n06.04.2020,3874,527,133,28\\r\\n07.04.2020,4069,505,118,32\\r\\n08.04.2020,4238,546,126,37\\r\\n09.04.2020,4357,559,136,42\\r\\n10.04.2020,4446,615,143,46\\r\\n11.04.2020,4553,601,139,50\\r\\n12.04.2020,4583,566,133,51\\r\\n13.04.2020,4667,568,141,56\\r\\n14.04.2020,4736,582,137,62\\r\\n15.04.2020,4870,599,128,74\\r\\n16.04.2020,4971,602,142,84\\r\\n17.04.2020,5091,585,146,91\\r\\n18.04.2020,5187,592,153,92\\r\\n19.04.2020,5225,567,156,94\\r\\n20.04.2020,5265,567,156,97\\r\\n21.04.2020,5341,596,164,105\\r\\n22.04.2020,5355,596,164,105\\r\\n23.04.2020,5476,565,152,112\\r\\n24.04.2020,5532,523,154,113\\r\\n25.04.2020,5607,524,156,123\\r\\n26.04.2020,5644,546,160,125\\r\\n27.04.2020,5677,542,152,127\\r\\n28.04.2020,5738,540,158,137\\r\\n29.04.2020,5821,604,157,147\\r\\n30.04.2020,5881,566,162,149\\r\\n01.05.2020,5936,527,160,152\\r\\n02.05.2020,5970,541,159,154\\r\\n03.05.2020,6004,511,152,154\\r\\n04.05.2020,6036,484,145,154\\r\\n05.05.2020,6086,476,144,159\\r\\n06.05.2020,6143,495,141,162\\r\\n07.05.2020,6203,508,152,163\\r\\n08.05.2020,6236,467,150,164\\r\\n09.05.2020,6256,469,142,165\\r\\n10.05.2020,6267,486,151,165\\r\\n11.05.2020,6269,447,135,165\\r\\n12.05.2020,6294,412,131,170\\r\\n13.05.2020,6338,352,123,173\\r\\n14.05.2020,6393,282,103,177\\r\\n15.05.2020,6424,259,93,181\\r\\n16.05.2020,6443,231,92,181\\r\\n17.05.2020,6454,229,87,180\\r\\n18.05.2020,6474,211,71,182\\r\\n19.05.2020,6503,194,67,186\\r\\n20.05.2020,6552,185,66,186\\r\\n21.05.2020,6582,172,62,190\\r\\n22.05.2020,6611,167,59,190\\r\\n23.05.2020,6636,166,58,191\\r\\n24.05.2020,6641,177,60,191\\r\\n25.05.2020,6651,177,60,191\\r\\n26.05.2020,6672,164,58,193\\r\\n27.05.2020,6702,171,56,195\\r\\n28.05.2020,6737,146,47,196\\r\\n29.05.2020,6766,148,40,197\\r\\n30.05.2020,6799,150,43,198\\r\\n31.05.2020,6815,144,41,198\\r\\n01.06.2020,6838,138,40,198\\r\\n02.06.2020,6873,130,42,198\\r\\n03.06.2020,6900,117,43,200\\r\\n04.06.2020,6945,123,46,200\\r\\n05.06.2020,6963,139,45,201\\r\\n06.06.2020,6996,132,47,205\\r\\n07.06.2020,7015,129,42,205\\r\\n08.06.2020,7041,135,44,205\\r\\n09.06.2020,7081,132,42,206\\r\\n10.06.2020,7135,127,41,208\\r\\n11.06.2020,7164,124,42,208\\r\\n12.06.2020,7251,126,42,208\\r\\n13.06.2020,7281,126,42,208\\r\\n14.06.2020,7321,130,42,208\\r\\n15.06.2020,7368,136,43,208\\r\\n16.06.2020,7401,141,42,209\\r\\n17.06.2020,7474,151,46,210\\r\\n18.06.2020,7602,138,45,211\\r\\n19.06.2020,7732,142,45,211\\r\\n20.06.2020,7803,140,42,211\\r\\n21.06.2020,7832,146,42,211\\r\\n22.06.2020,7915,146,42,211\\r\\n23.06.2020,7974,130,39,211\\r\\n24.06.2020,8020,120,35,212\\r\\n25.06.2020,8095,135,34,212\\r\\n26.06.2020,8144,128,32,213\\r\\n27.06.2020,8167,121,31,213\\r\\n28.06.2020,8175,121,30,213\\r\\n29.06.2020,8219,123,31,214\\r\\n30.06.2020,8242,106,33,214\\r\\n01.07.2020,8301,129,35,214\\r\\n02.07.2020,8344,121,26,214\\r\\n03.07.2020,8392,111,22,214\\r\\n04.07.2020,8433,122,31,215\\r\\n05.07.2020,8450,118,30,215\\r\\n06.07.2020,8461,116,30,215\\r\\n07.07.2020,8501,109,31,215\\r\\n08.07.2020,8536,87,29,216\\r\\n09.07.2020,8585,69,28,216\\r\\n10.07.2020,8616,69,28,216\\r\\n11.07.2020,8636,53,17,217\\r\\n12.07.2020,8637,48,16,217\\r\\n13.07.2020,8655,53,23,219\\r\\n14.07.2020,8673,51,22,220\\r\\n15.07.2020,8698,47,15,221\\r\\n16.07.2020,8724,43,17,221\\r\\n17.07.2020,8747,38,15,221\\r\\n18.07.2020,8772,38,19,221\\r\\n19.07.2020,8778,37,20,221\\r\\n20.07.2020,8801,38,20,221\\r\\n21.07.2020,8835,41,20,222\\r\\n22.07.2020,8859,39,20,222\\r\\n23.07.2020,8893,40,19,222\\r\\n24.07.2020,8956,41,20,223\\r\\n25.07.2020,8990,42,20,223\\r\\n26.07.2020,9000,44,20,223\\r\\n27.07.2020,9019,43,19,223\\r\\n28.07.2020,9070,39,19,223\\r\\n29.07.2020,9149,42,19,223\\r\\n30.07.2020,9191,41,20,223\\r\\n31.07.2020,9273,39,16,223\\r\\n01.08.2020,9318,45,14,223\\r\\n02.08.2020,9327,41,15,224\\r\\n03.08.2020,9366,43,18,223\\r\\n04.08.2020,9398,46,19,223\\r\\n05.08.2020,9489,47,20,224\\r\\n06.08.2020,9542,38,16,224\\r\\n07.08.2020,9639,37,16,224\\r\\n08.08.2020,9687,39,16,224\\r\\n09.08.2020,9697,36,14,224\\r\\n10.08.2020,9739,37,15,224\\r\\n11.08.2020,9850,34,14,224\\r\\n12.08.2020,9975,36,14,224\\r\\n13.08.2020,10106,34,14,224\\r\\n14.08.2020,10195,35,14,224\\r\\n15.08.2020,10237,34,13,224\\r\\n16.08.2020,10252,35,15,224\\r\\n17.08.2020,10371,35,14,224\\r\\n18.08.2020,10447,33,14,224\\r\\n19.08.2020,10518,33,15,224\\r\\n20.08.2020,10628,31,15,226\\r\\n21.08.2020,10705,34,16,226\\r\\n22.08.2020,10737,44,15,226\\r\\n23.08.2020,10738,46,16,226\\r\\n24.08.2020,10831,40,15,226\\r\\n25.08.2020,10897,42,18,226\\r\\n26.08.2020,10996,43,19,226\\r\\n27.08.2020,11071,46,21,226\\r\\n28.08.2020,11173,39,20,226\\r\\n29.08.2020,11208,39,20,226\\r\\n30.08.2020,11213,37,19,226\\r\\n31.08.2020,11333,37,18,226\\r\\n01.09.2020,11397,32,12,226\\r\\n02.09.2020,11431,34,13,226\\r\\n03.09.2020,11529,36,14,226\\r\\n04.09.2020,11623,37,13,226\\r\\n05.09.2020,11703,36,12,226\\r\\n06.09.2020,11727,36,12,226\\r\\n07.09.2020,11792,37,11,226\\r\\n08.09.2020,11879,46,16,226\\r\\n09.09.2020,11951,46,14,226\\r\\n10.09.2020,12090,44,13,226\\r\\n11.09.2020,12216,44,15,226\\r\\n12.09.2020,12254,49,16,226\\r\\n13.09.2020,12269,43,14,226\\r\\n14.09.2020,12354,49,16,226\\r\\n15.09.2020,12463,49,14,227\\r\\n16.09.2020,12593,48,16,227\\r\\n17.09.2020,12733,48,14,227\\r\\n18.09.2020,12919,47,14,227\\r\\n19.09.2020,13065,53,16,227\\r\\n20.09.2020,13109,53,15,227\\r\\n21.09.2020,,49,16,227\\r\\n22.09.2020,,61,20,228\\r\\n23.09.2020,,61,18,228\\r\\n24.09.2020,,63,18,228\\r\\n25.09.2020,,70,21,228\\r\\n26.09.2020,,77,24,228\\r\\n27.09.2020,,77,20,228\\r\\n28.09.2020,,80,24,228\\r\\n29.09.2020,,91,27,228\\r\\n30.09.2020,,100,31,228\\r\\n01.10.2020,,103,33,229\\r\\n02.10.2020,,115,35,231\\r\\n03.10.2020,,111,39,231\\r\\n04.10.2020,,110,41,231\\r\\n05.10.2020,,111,39,231\\r\\n06.10.2020,,126,40,231\\r\\n07.10.2020,,142,42,232\\r\\n08.10.2020,,153,43,\\r\\n09.10.2020,,152,39,\\r\\n10.10.2020,,159,40,\\r\\n11.10.2020,,160,39,\\r\\n12.10.2020,,182,44,\\r\\n13.10.2020,,201,49,\\r\\n14.10.2020,,224,59,\\r\\n15.10.2020,,239,59,\\r\\n16.10.2020,,262,63,\\r\\n17.10.2020,,282,61,\\r\\n18.10.2020,,284,66,\\r\\n19.10.2020,,296,67,\\r\\n20.10.2020,,314,80,\\r\\n21.10.2020,,317,85,\\r\\n22.10.2020,,362,93,\\r\\n23.10.2020,,374,101,\\r\\n24.10.2020,,438,120,\\r\\n25.10.2020,,448,117,\\r\\n26.10.2020,,463,120,\\r\\n27.10.2020,,495,123,\\r\\n28.10.2020,,581,151,\\r\\n29.10.2020,,639,156,\\r\\n30.10.2020,,624,155,\\r\\n31.10.2020,,663,169,\\r\\n01.11.2020,,691,172,\\r\\n02.11.2020,,702,170,\\r\\n03.11.2020,,826,218,\\r\\n04.11.2020,,863,234,\\r\\n05.11.2020,,863,234,\\r\\n06.11.2020,,910,244,\\r\\n07.11.2020,,898,238,\\r\\n08.11.2020,,921,249,\\r\\n09.11.2020,,935,249,\\r\\n10.11.2020,,958,261,\\r\\n11.11.2020,,981,268,\\r\\n12.11.2020,,991,265,\\r\\n13.11.2020,,966,272,\\r\\n14.11.2020,,974,275,\\r\\n15.11.2020,,982,274,\\r\\n16.11.2020,,1000,274,\\r\\n17.11.2020,,1038,288,\\r\\n18.11.2020,,1061,300,\\r\\n19.11.2020,,1062,296,\\r\\n20.11.2020,,1082,293,\\r\\n21.11.2020,,1049,303,\\r\\n22.11.2020,,1031,295,\\r\\n23.11.2020,,1043,295,\\r\\n24.11.2020,,1078,295,\\r\\n25.11.2020,,1109,302,\\r\\n26.11.2020,,1112,305,\\r\\n27.11.2020,,1123,298,\\r\\n28.11.2020,,1128,320,\\r\\n29.11.2020,,1129,304,\\r\\n30.11.2020,,1142,316,\\r\\n01.12.2020,,1177,309,\\r\\n02.12.2020,,1214,299,\\r\\n03.12.2020,,1194,307\\r\\n04.12.2020,,1204,318\\r\\n05.12.2020,,1184,323\\r\\n06.12.2020,,1183,333\\r\\n07.12.2020,,1151,298\\r\\n08.12.2020,,1244,341\\r\\n09.12.2020,,1282,336\\r\\n10.12.2020,,1322,346\\r\\n11.12.2020,,1357,348\\r\\n12.12.2020,,1377,350\\r\\n13.12.2020,,1374,330\\r\\n14.12.2020,,1372,337\\r\\n15.12.2020,,1401,350\\r\\n16.12.2020,,1455,369\\r\\n17.12.2020,,1476,373\\r\\n18.12.2020,,1482,369\\r\\n19.12.2020,,1521,366\\r\\n20.12.2020,,1578,366\\r\\n21.12.2020,,1584,362\\r\\n22.12.2020,,1643,373\\r\\n23.12.2020,,1649,369\\r\\n24.12.2020,,1627,364\\r\\n25.12.2020,,1670,382\\r\\n26.12.2020,,1623,376\\r\\n27.12.2020,,1656,394\\r\\n28.12.2020,,1706,405\\r\\n29.12.2020,,1701,404\\r\\n30.12.2020,,1773,433\\r\\n31.12.2020,,1713,436\\r\\n01.01.2021,,1696,432\\r\\n02.01.2021,,1675,430\\r\\n03.01.2021,,1673,446\\r\\n04.01.2021,,1694,437\\r\\n05.01.2021,,1668,445\\r\\n06.01.2021,,1705,455\\r\\n07.01.2021,,1695,452\\r\\n08.01.2021,,1687,456\\r\\n09.01.2021,,1600,448\\r\\n10.01.2021,,1600,427\\r\\n11.01.2021,,1586,426\\r\\n12.01.2021,,1565,422\\r\\n13.01.2021,,1527,420\\r\\n14.01.2021,,1555,417\\r\\n15.01.2021,,1570,415\\r\\n16.01.2021,,1539,416\\r\\n17.01.2021,,1486,399\\r\\n18.01.2021,,1500,395\\r\\n19.01.2021,,1498,399\\r\\n20.01.2021,,1494,396\\r\\n21.01.2021,,1510,393\\r\\n22.01.2021,,1497,389\\r\\n23.01.2021,,1436,392\\r\\n24.01.2021,,1414,391\\r\\n25.01.2021,,1420,387\\r\\n26.01.2021,,1416,387\\r\\n27.01.2021,,1426,391\\r\\n28.01.2021,,1397,382\\r\\n29.01.2021,,1368,379\\r\\n30.01.2021,,1313,365\\r\\n31.01.2021,,1283,358\\r\\n01.02.2021,,1244,342\\r\\n02.02.2021,,1281,358\\r\\n03.02.2021,,1251,344\\r\\n04.02.2021,,1228,350\\r\\n05.02.2021,,1204,352\\r\\n06.02.2021,,1167,327\\r\\n07.02.2021,,1114,325\\r\\n08.02.2021,,1101,315\\r\\n09.02.2021,,1090,311\\r\\n10.02.2021,,1060,306\\r\\n11.02.2021,,1031,304\\r\\n12.02.2021,,998,298\\r\\n13.02.2021,,976,280\\r\\n14.02.2021,,938,268\\r\\n15.02.2021,,926,247\\r\\n16.02.2021,,934,267\\r\\n17.02.2021,,977,258\\r\\n18.02.2021,,946,250\\r\\n19.02.2021,,934,258\\r\\n20.02.2021,,912,265\\r\\n21.02.2021,,873,249\\r\\n22.02.2021,,869,236\\r\\n23.02.2021,,860,235\\r\\n24.02.2021,,847,233\\r\\n25.02.2021,,821,221\\r\\n26.02.2021,,794,217\\r\\n27.02.2021,,781,212\\r\\n28.02.2021,,754,209\\r\\n01.03.2021,,759,204\\r\\n02.03.2021,,760,213\\r\\n03.03.2021,,761,221\\r\\n04.03.2021,,722,220\\r\\n05.03.2021,,697,223\\r\\n06.03.2021,,681,212\\r\\n07.03.2021,,639,203\\r\\n08.03.2021,,640,208\\r\\n09.03.2021,,646,212\\r\\n10.03.2021,,660,207\\r\\n11.03.2021,,663,202\\r\\n12.03.2021,,629,193\\r\\n13.03.2021,,595,202\\r\\n14.03.2021,,573,199\\r\\n15.03.2021,,582,198\\r\\n16.03.2021,,587,190\\r\\n17.03.2021,,603,204\\r\\n18.03.2021,,589,198\\r\\n19.03.2021,,581,196\\r\\n20.03.2021,,583,197\\r\\n21.03.2021,,555,178\\r\\n22.03.2021,,570,186\\r\\n23.03.2021,,606,197\\r\\n24.03.2021,,612,201\\r\\n25.03.2021,,650,208\\r\\n26.03.2021,,635,218\\r\\n27.03.2021,,646,222\\r\\n28.03.2021,,642,221\\r\\n29.03.2021,,633,213\\r\\n30.03.2021,,660,226\\r\\n31.03.2021,,680,232\\r\\n01.04.2021,,680,239\\r\\n02.04.2021,,661,238\\r\\n03.04.2021,,628,236\\r\\n04.04.2021,,639,240\\r\\n05.04.2021,,660,249\\r\\n06.04.2021,,691,254\\r\\n07.04.2021,,754,281\\r\\n08.04.2021,,787,282\\r\\n09.04.2021,,796,282\\r\\n10.04.2021,,779,295\\r\\n11.04.2021,,771,305\\r\\n12.04.2021,,768,308\\r\\n13.04.2021,,775,313\\r\\n14.04.2021,,778,313\\r\\n15.04.2021,,740,309\\r\\n16.04.2021,,721,308\\r\\n17.04.2021,,700,307\\r\\n18.04.2021,,693,308\\r\\n19.04.2021,,714,308\\r\\n20.04.2021,,731,315\\r\\n21.04.2021,,764,323\\r\\n22.04.2021,,754,326\\r\\n23.04.2021,,744,334\\r\\n24.04.2021,,737,329\\r\\n25.04.2021,,741,328\\r\\n26.04.2021,,761,329\\r\\n27.04.2021,,755,329\\r\\n28.04.2021,,737,320\\r\\n29.04.2021,,723,316\\r\\n30.04.2021,,684,315\\r\\n01.05.2021,,665,319\\r\\n02.05.2021,,654,312\\r\\n03.05.2021,,661,311\\r\\n04.05.2021,,623,293\\r\\n05.05.2021,,627,291\\r\\n06.05.2021,,627,291\\r\\n07.05.2021,,617,289\\r\\n08.05.2021,,563,294\\r\\n09.05.2021,,546,284\\r\\n10.05.2021,,551,281\\r\\n11.05.2021,,553,281\\r\\n12.05.2021,,544,263\\r\\n13.05.2021,,528,252\\r\\n14.05.2021,,535,245\\r\\n15.05.2021,,523,236\\r\\n16.05.2021,,514,236\\r\\n17.05.2021,,505,235\\r\\n18.05.2021,,493,238\\r\\n19.05.2021,,463,227\\r\\n20.05.2021,,424,217\\r\\n21.05.2021,,424,210\\r\\n22.05.2021,,397,199\\r\\n23.05.2021,,367,186\\r\\n24.05.2021,,367,186\\r\\n25.05.2021,,361,187\\r\\n26.05.2021,,350,181\\r\\n27.05.2021,,324,172\\r\\n28.05.2021,,297,160\\r\\n29.05.2021,,287,152\\r\\n30.05.2021,,276,145\\r\\n31.05.2021,,265,144\\r\\n01.06.2021,,249,140\\r\\n02.06.2021,,248,141\\r\\n03.06.2021,,239,135\\r\\n04.06.2021,,229,135\\r\\n05.06.2021,,223,129\\r\\n06.06.2021,,218,126\\r\\n07.06.2021,,221,133\\r\\n08.06.2021,,203,118\\r\\n09.06.2021,,197,111\\r\\n10.06.2021,,183,106\\r\\n11.06.2021,,175,100\\r\\n12.06.2021,,168,91\\r\\n13.06.2021,,162,90\\r\\n14.06.2021,,159,87\\r\\n15.06.2021,,156,83\\r\\n16.06.2021,,156,86\\r\\n17.06.2021,,155,87\\r\\n18.06.2021,,148,82\\r\\n19.06.2021,,143,78\\r\\n20.06.2021,,140,80\\r\\n21.06.2021,,140,80\\r\\n22.06.2021,,137,74\\r\\n23.06.2021,,119,59\\r\\n24.06.2021,,105,49\\r\\n25.06.2021,,114,60\\r\\n26.06.2021,,109,61\\r\\n27.06.2021,,109,61\\r\\n28.06.2021,,109,61\\r\\n29.06.2021,,96,52\\r\\n30.06.2021,,103,53\\r\\n01.07.2021,,98,50\\r\\n02.07.2021,,91,43\\r\\n03.07.2021,,95,48\\r\\n04.07.2021,,94,47\\r\\n05.07.2021,,93,46\\r\\n06.07.2021,,83,42\\r\\n07.07.2021,,63,43\\r\\n08.07.2021,,61,42\\r\\n09.07.2021,,63,43\\r\\n10.07.2021,,63,44\\r\\n11.07.2021,,64,44\\r\\n12.07.2021,,64,44\\r\\n13.07.2021,,57,39\\r\\n14.07.2021,,59,39\\r\\n15.07.2021,,60,38\\r\\n16.07.2021,,58,34\\r\\n17.07.2021,,58,34\\r\\n18.07.2021,,58,34\\r\\n19.07.2021,,66,39\\r\\n20.07.2021,,66,39\\r\\n21.07.2021,,59,33\\r\\n22.07.2021,,63,36\\r\\n23.07.2021,,63,39\\r\\n24.07.2021,,59,36\\r\\n25.07.2021,,59,36\\r\\n26.07.2021,,59,36\\r\\n27.07.2021,,63,35\\r\\n28.07.2021,,66,36\\r\\n29.07.2021,,70,35\\r\\n30.07.2021,,66,35\\r\\n31.07.2021,,69,34\\r\\n01.08.2021,,69,34\\r\\n02.08.2021,,69,34\\r\\n03.08.2021,,80,37\\r\\n04.08.2021,,82,38\\r\\n05.08.2021,,80,38\\r\\n06.08.2021,,82,41\\r\\n07.08.2021,,82,41\\r\\n08.08.2021,,87,41\\r\\n09.08.2021,,87,41\\r\\n10.08.2021,,88,37\\r\\n11.08.2021,,88,37\\r\\n12.08.2021,,98,50\\r\\n13.08.2021,,93,46\\r\\n14.08.2021,,101,46\\r\\n15.08.2021,,101,46\\r\\n16.08.2021,,101,46\\r\\n17.08.2021,,124,52\\r\\n18.08.2021,,124,52\\r\\n19.08.2021,,136,51\\r\\n20.08.2021,,139,53\\r\\n21.08.2021,,139,53\\r\\n22.08.2021,,139,53\\r\\n23.08.2021,,139,53\\r\\n24.08.2021,,139,55\\r\\n25.08.2021,,146,49\\r\\n26.08.2021,,146,46\\r\\n27.08.2021,,148,48\\r\\n28.08.2021,,152,48\\r\\n29.08.2021,,152,48\\r\\n30.08.2021,,152,48\\r\\n31.08.2021,,160,50\\r\\n01.09.2021,,165,51\\r\\n02.09.2021,,169,57\\r\\n03.09.2021,,185,57\\r\\n04.09.2021,,184,64\\r\\n05.09.2021,,184,64\\r\\n06.09.2021,,184,64\\r\\n07.09.2021,,198,80\\r\\n08.09.2021,,197,75\\r\\n09.09.2021,,202,76\\r\\n10.09.2021,,198,79\\r\\n11.09.2021,,189,79\\r\\n12.09.2021,,189,79\\r\\n13.09.2021,,189,79\\r\\n14.09.2021,,193,76\\r\\n15.09.2021,,197,78\\r\\n16.09.2021,,197,80\\r\\n17.09.2021,,186,78\\r\\n18.09.2021,,172,76\\r\\n19.09.2021,,172,76\\r\\n20.09.2021,,172,76\\r\\n21.09.2021,,181,86\\r\\n22.09.2021,,179,82\\r\\n23.09.2021,,178,85\\r\\n24.09.2021,,173,83\\r\\n25.09.2021,,175,82\\r\\n26.09.2021,,175,82\\r\\n27.09.2021,,175,82\\r\\n28.09.2021,,184,85\\r\\n29.09.2021,,193,88\\r\\n30.09.2021,,196,91\\r\\n01.10.2021,,190,91\\r\\n02.10.2021,,190,95\\r\\n03.10.2021,,190,95\\r\\n04.10.2021,,190,95\\r\\n05.10.2021,,201,83\\r\\n06.10.2021,,216,85\\r\\n07.10.2021,,212,85\\r\\n08.10.2021,,208,82\\r\\n09.10.2021,,211,87\\r\\n10.10.2021,,211,87\\r\\n11.10.2021,,211,87\\r\\n12.10.2021,,213,92\\r\\n13.10.2021,,217,87\\r\\n14.10.2021,,230,96\\r\\n15.10.2021,,237,98\\r\\n16.10.2021,,241,95\\r\\n17.10.2021,,241,95\\r\\n18.10.2021,,241,95\\r\\n19.10.2021,,241,95\\r\\n20.10.2021,,275,94\\r\\n21.10.2021,,282,98\\r\\n22.10.2021,,290,97\\r\\n23.10.2021,,283,93\\r\\n24.10.2021,,283,93\\r\\n25.10.2021,,283,93\\r\\n26.10.2021,,340,99\\r\\n27.10.2021,,340,94\\r\\n28.10.2021,,363,105\\r\\n29.10.2021,,376,111\\r\\n30.10.2021,,382,120\\r\\n31.10.2021,,382,120\\r\\n01.11.2021,,382,120\\r\\n02.11.2021,,395,117\\r\\n03.11.2021,,411,117\\r\\n04.11.2021,,431,113\\r\\n05.11.2021,,425,113\\r\\n06.11.2021,,428,119\\r\\n07.11.2021,,428,119\\r\\n08.11.2021,,428,119\\r\\n09.11.2021,,461,128\\r\\n10.11.2021,,493,132\\r\\n11.11.2021,,481,135\\r\\n12.11.2021,,496,140\\r\\n13.11.2021,,497,142\\r\\n14.11.2021,,497,142\\r\\n15.11.2021,,497,142\\r\\n16.11.2021,,538,159\\r\\n17.11.2021,,568,161\\r\\n18.11.2021,,583,160\\r\\n19.11.2021,,612,169\\r\\n20.11.2021,,598,176\\r\\n21.11.2021,,598,176\\r\\n22.11.2021,,598,176\\r\\n23.11.2021,,650,189\\r\\n24.11.2021,,639,190\\r\\n25.11.2021,,655,202\\r\\n26.11.2021,,659,197\\r\\n27.11.2021,,648,195\\r\\n28.11.2021,,648,195\\r\\n29.11.2021,,648,195\\r\\n30.11.2021,,704,194\\r\\n01.12.2021,,714,203\\r\\n02.12.2021,,705,208\\r\\n03.12.2021,,696,211\\r\\n04.12.2021,,705,224\\r\\n05.12.2021,,705,224\\r\\n06.12.2021,,705,224\\r\\n07.12.2021,,639,230\\r\\n08.12.2021,,710,243\\r\\n09.12.2021,,721,250\\r\\n10.12.2021,,722,255\\r\\n11.12.2021,,686,244\\r\\n12.12.2021,,661,244\\r\\n13.12.2021,,654,242\\r\\n14.12.2021,,701,252\\r\\n15.12.2021,,703,240\\r\\n16.12.2021,,690,237\\r\\n17.12.2021,,688,231\\r\\n18.12.2021,,690,229\\r\\n19.12.2021,,690,229\\r\\n20.12.2021,,664,229\\r\\n21.12.2021,,657,223\\r\\n22.12.2021,,656,217\\r\\n23.12.2021,,644,213\\r\\n24.12.2021,,613,204\\r\\n25.12.2021,,586,202\\r\\n26.12.2021,,589,201\\r\\n27.12.2021,,584,200\\r\\n28.12.2021,,597,200\\r\\n29.12.2021,,618,207\\r\\n30.12.2021,,614,202\\r\\n31.12.2021,,591,200\\r\\n01.01.2022,,581,201\\r\\n02.01.2022,,572,198\\r\\n03.01.2022,,573,198\\r\\n04.01.2022,,628,198\\r\\n05.01.2022,,665,200\\r\\n06.01.2022,,636,193\\r\\n07.01.2022,,634,194\\r\\n08.01.2022,,631,195\\r\\n09.01.2022,,615,197\\r\\n10.01.2022,,614,198\\r\\n11.01.2022,,638,203\\r\\n12.01.2022,,686,202\\r\\n13.01.2022,,701,194\\r\\n14.01.2022,,694,204\\r\\n15.01.2022,,719,194\\r\\n16.01.2022,,727,195\\r\\n17.01.2022,,725,189\\r\\n18.01.2022,,771,197\\r\\n19.01.2022,,780,183\\r\\n20.01.2022,,798,187\\r\\n21.01.2022,,783,177\\r\\n22.01.2022,,792,164\\r\\n23.01.2022,,802,170\\r\\n24.01.2022,,793,175\\r\\n25.01.2022,,926,182\\r\\n26.01.2022,,984,186\\r\\n27.01.2022,,1002,192\\r\\n28.01.2022,,1033,197\\r\\n29.01.2022,,1082,197\\r\\n30.01.2022,,1095,193\\r\\n31.01.2022,,1099,193\\r\\n01.02.2022,,1157,193\\r\\n02.02.2022,,1175,188\\r\\n03.02.2022,,1201,201\\r\\n04.02.2022,,1188,199\\r\\n05.02.2022,,1214,195\\r\\n06.02.2022,,1195,195\\r\\n07.02.2022,,1213,199\\r\\n08.02.2022,,1242,197\\r\\n09.02.2022,,1278,199\\r\\n10.02.2022,,1277,193\\r\\n11.02.2022,,1285,195\\r\\n12.02.2022,,1301,189\\r\\n13.02.2022,,1277,186\"","export default \"﻿Tag,Verstorben,Stationär,Genesen,Gesamt\\r\\n07-03-20,0,0,0,44\\r\\n08-03-20,0,0,0,50\\r\\n09-03-20,0,0,0,50\\r\\n10-03-20,0,0,0,58\\r\\n11-03-20,0,0,0,88\\r\\n12-03-20,0,0,0,110\\r\\n13-03-20,0,0,0,149\\r\\n14-03-20,0,0,0,201\\r\\n15-03-20,0,0,0,242\\r\\n16-03-20,0,0,0,260\\r\\n17-03-20,0,0,0,359\\r\\n18-03-20,0,0,0,509\\r\\n19-03-20,0,0,0,676\\r\\n20-03-20,0,0,0,878\\r\\n21-03-20,0,0,0,1042\\r\\n22-03-20,2,0,0,1316\\r\\n23-03-20,2,0,0,1316\\r\\n24-03-20,2,0,0,1381\\r\\n25-03-20,2,0,0,1576\\r\\n26-03-20,3,0,0,1687\\r\\n27-03-20,3,0,0,1845\\r\\n28-03-20,3,0,0,2080\\r\\n29-03-20,3,0,250,2256\\r\\n30-03-20,5,0,250,2501\\r\\n31-03-20,5,145,283,2699\\r\\n01-04-20,9,173,487,2926\\r\\n02-04-20,9,192,645,3099\\r\\n03-04-20,12,214,805,3304\\r\\n04-04-20,12,260,929,3449\\r\\n05-04-20,14,274,1103,3642\\r\\n06-04-20,16,297,1240,3794\\r\\n07-04-20,18,325,1384,3884\\r\\n08-04-20,24,371,1577,4003\\r\\n09-04-20,32,395,1739,4123\\r\\n10-04-20,42,418,1920,4233\\r\\n11-04-20,44,438,2043,4352\\r\\n12-04-20,51,475,2110,4459\\r\\n13-04-20,52,515,2240,4615\\r\\n14-04-20,63,555,2363,4717\\r\\n15-04-20,67,590,2640,4820\\r\\n16-04-20,78,630,2655,4927\\r\\n17-04-20,87,666,2801,5014\\r\\n18-04-20,94,685,2969,5101\\r\\n19-04-20,99,699,3044,5159\\r\\n20-04-20,105,717,3236,5211\\r\\n21-04-20,108,744,3430,5263\\r\\n22-04-20,116,766,3650,5332\\r\\n23-04-20,130,779,3858,5411\\r\\n24-04-20,137,794,3858,5492\\r\\n25-04-20,138,814,3858,5549\\r\\n26-04-20,142,818,3858,5581\\r\\n\\r\\n\"","export default \"Datum,Gemeldete Fälle,Stationäre Behandlung,Intensivmedizin,gestorben\\r\\n01.03.2020,,,0,\\r\\n02.03.2020,,,0,\\r\\n03.03.2020,,,2,\\r\\n04.03.2020,,,2,\\r\\n05.03.2020,,,4,\\r\\n06.03.2020,,,4,\\r\\n07.03.2020,,,4,\\r\\n08.03.2020,,,4,\\r\\n09.03.2020,,,31,\\r\\n10.03.2020,,,31,\\r\\n11.03.2020,,,33,\\r\\n12.03.2020,,,57,\\r\\n13.03.2020,,,65,\\r\\n14.03.2020,,,70,\\r\\n15.03.2020,,,84,\\r\\n16.03.2020,,,78,\\r\\n17.03.2020,,,83,\\r\\n18.03.2020,,,91,\\r\\n19.03.2020,,,121,\\r\\n20.03.2020,,,125,\\r\\n21.03.2020,,,157,\\r\\n22.03.2020,,,177,\\r\\n23.03.2020,,,225,\\r\\n24.03.2020,,,260,\\r\\n25.03.2020,,,290,\\r\\n26.03.2020,,,324,\\r\\n27.03.2020,,,346,\\r\\n28.03.2020,,,364,\\r\\n29.03.2020,,,435,\\r\\n30.03.2020,,,449,\\r\\n31.03.2020,,,451,\\r\\n01.04.2020,,,499,\\r\\n02.04.2020,,,565,\\r\\n03.04.2020,,,627,\\r\\n04.04.2020,,,691,\\r\\n05.04.2020,,,685,\\r\\n06.04.2020,,,783,\\r\\n07.04.2020,,,895,\\r\\n08.04.2020,,,976,\\r\\n09.04.2020,,,1077,\\r\\n10.04.2020,,,1139,\\r\\n11.04.2020,,,1152,\\r\\n12.04.2020,,,1277,\\r\\n13.04.2020,,,1370,\\r\\n14.04.2020,,,1385,\\r\\n15.04.2020,,,1424,\\r\\n16.04.2020,,,1601,\\r\\n17.04.2020,,,1727,\\r\\n18.04.2020,,,1769,\\r\\n19.04.2020,,,1839,\\r\\n20.04.2020,,,1826,\\r\\n21.04.2020,,,1935,\\r\\n22.04.2020,,,1985,\\r\\n23.04.2020,,,2010,\\r\\n24.04.2020,,,1988,\\r\\n25.04.2020,,,1947,\\r\\n26.04.2020,,,1952,\\r\\n27.04.2020,,,1950,\\r\\n28.04.2020,,,2024,\\r\\n29.04.2020,,,2002,\\r\\n30.04.2020,,,2073,\\r\\n01.05.2020,,,2151,\\r\\n02.05.2020,,,2089,\\r\\n03.05.2020,,,2062,\\r\\n04.05.2020,,,2080,\\r\\n05.05.2020,,,2146,\\r\\n06.05.2020,,,2195,\\r\\n07.05.2020,,,2196,\\r\\n08.05.2020,,,2281,\\r\\n09.05.2020,,,2312,\\r\\n10.05.2020,,,2360,\\r\\n11.05.2020,,,2258,\\r\\n12.05.2020,,,1843,\\r\\n13.05.2020,,,1833,\\r\\n14.05.2020,,,1877,\\r\\n15.05.2020,,,1900,\\r\\n16.05.2020,,,1908,\\r\\n17.05.2020,,,1932,\\r\\n18.05.2020,,,1946,\\r\\n19.05.2020,,,1936,\\r\\n20.05.2020,,,1969,\\r\\n21.05.2020,,,1955,\\r\\n22.05.2020,,,1975,\\r\\n23.05.2020,,,2006,\\r\\n24.05.2020,,,2031,\\r\\n25.05.2020,,,2044,\\r\\n26.05.2020,,,2044,\\r\\n27.05.2020,,,2034,\\r\\n28.05.2020,,,2055,\\r\\n29.05.2020,,,2007,\\r\\n30.05.2020,,,1848,\\r\\n31.05.2020,,,1823,\\r\\n01.06.2020,,,1794,\\r\\n02.06.2020,,,1743,\\r\\n03.06.2020,,,1699,\\r\\n04.06.2020,,,1670,\\r\\n05.06.2020,,,1633,\\r\\n06.06.2020,,,1635,\\r\\n07.06.2020,,,1445,\\r\\n08.06.2020,,,1448,\\r\\n09.06.2020,,,1442,\\r\\n10.06.2020,,,1427,\\r\\n11.06.2020,,,1446,\\r\\n12.06.2020,,,1424,\\r\\n13.06.2020,,,1419,\\r\\n14.06.2020,,,1368,\\r\\n15.06.2020,,,1390,\\r\\n16.06.2020,,,1416,\\r\\n17.06.2020,,,1402,\\r\\n18.06.2020,,,1377,\\r\\n19.06.2020,,,1382,\\r\\n20.06.2020,,,1340,\\r\\n21.06.2020,,,1287,\\r\\n22.06.2020,,,1310,\\r\\n23.06.2020,,,1319,\\r\\n24.06.2020,,,1349,\\r\\n25.06.2020,,,1338,\\r\\n26.06.2020,,,1330,\\r\\n27.06.2020,,,1355,\\r\\n28.06.2020,,,1322,\\r\\n29.06.2020,,,1027,\\r\\n30.06.2020,,,951,\\r\\n01.07.2020,,,889,\\r\\n02.07.2020,,,804,\\r\\n03.07.2020,,,736,\\r\\n04.07.2020,,,646,\\r\\n05.07.2020,,,584,\\r\\n06.07.2020,,,495,\\r\\n07.07.2020,,,405,\\r\\n08.07.2020,,,417,\\r\\n09.07.2020,,,451,\\r\\n10.07.2020,,,476,\\r\\n11.07.2020,,,495,\\r\\n12.07.2020,,,554,\\r\\n13.07.2020,,,597,\\r\\n14.07.2020,,,619,\\r\\n15.07.2020,,,691,\\r\\n16.07.2020,,,777,\\r\\n17.07.2020,,,826,\\r\\n18.07.2020,,,892,\\r\\n19.07.2020,,,923,\\r\\n20.07.2020,,,1026,\\r\\n21.07.2020,,,1073,\\r\\n22.07.2020,,,1193,\\r\\n23.07.2020,,,1201,\\r\\n24.07.2020,,,1300,\\r\\n25.07.2020,,,1410,\\r\\n26.07.2020,,,1491,\\r\\n27.07.2020,,,1702,\\r\\n28.07.2020,,,1848,\\r\\n29.07.2020,,,1944,\\r\\n30.07.2020,,,2049,\\r\\n31.07.2020,,,2183,\\r\\n01.08.2020,,,2153,\\r\\n02.08.2020,,,2159,\\r\\n03.08.2020,,,2327,\\r\\n04.08.2020,,,2432,\\r\\n05.08.2020,,,2483,\\r\\n06.08.2020,,,2552,\\r\\n07.08.2020,,,2595,\\r\\n08.08.2020,,,2488,\\r\\n09.08.2020,,,2416,\\r\\n10.08.2020,,,2555,\\r\\n11.08.2020,,,2548,\\r\\n12.08.2020,,,2717,\\r\\n13.08.2020,,,2714,\\r\\n14.08.2020,,,2594,\\r\\n15.08.2020,,,2614,\\r\\n16.08.2020,,,2567,\\r\\n17.08.2020,,,2651,\\r\\n18.08.2020,,,2462,\\r\\n19.08.2020,,,2559,\\r\\n20.08.2020,,,2544,\\r\\n21.08.2020,,,2576,\\r\\n22.08.2020,,,2762,\\r\\n23.08.2020,,,2922,\\r\\n24.08.2020,,,2630,\\r\\n25.08.2020,,,2686,\\r\\n26.08.2020,,,2770,\\r\\n27.08.2020,,,2528,\\r\\n28.08.2020,,,2827,\\r\\n29.08.2020,,,2812,\\r\\n30.08.2020,,,3015,\\r\\n31.08.2020,,,3288,\\r\\n01.09.2020,,,3341,\\r\\n02.09.2020,,,3568,\\r\\n03.09.2020,,,3709,\\r\\n04.09.2020,,,3827,\\r\\n05.09.2020,,,3677,\\r\\n06.09.2020,,,4082,\\r\\n07.09.2020,,,4341,\\r\\n08.09.2020,,,4432,\\r\\n09.09.2020,,,4554,\\r\\n10.09.2020,,,4728,\\r\\n11.09.2020,,,4681,\\r\\n12.09.2020,,,4684,\\r\\n13.09.2020,,,4649,\\r\\n14.09.2020,,,4631,\\r\\n15.09.2020,,,4468,\\r\\n16.09.2020,,,4802,\\r\\n17.09.2020,,,4739,\\r\\n18.09.2020,,,4655,\\r\\n19.09.2020,,,4305,\\r\\n20.09.2020,,,3819,\\r\\n21.09.2020,,,3749,\\r\\n22.09.2020,,,3841,\\r\\n23.09.2020,,,3666,\\r\\n24.09.2020,,,3518,\\r\\n25.09.2020,,,2871,\\r\\n26.09.2020,,,2561,\\r\\n27.09.2020,,,2350,\\r\\n28.09.2020,,,2258,\\r\\n29.09.2020,,,2067,\\r\\n30.09.2020,,,1964,\\r\\n01.10.2020,,,1795,\\r\\n02.10.2020,,,2104,\\r\\n03.10.2020,,,2103,\\r\\n04.10.2020,,,2043,\\r\\n05.10.2020,,,2057,\\r\\n06.10.2020,,,2135,\\r\\n07.10.2020,,,2447,\\r\\n08.10.2020,,,2485,\\r\\n09.10.2020,,,2555,\\r\\n10.10.2020,,,2555,\\r\\n11.10.2020,,,2693,\\r\\n12.10.2020,,,2805,\\r\\n13.10.2020,,,2643,\\r\\n14.10.2020,,,2559,\\r\\n15.10.2020,,,2743,\\r\\n16.10.2020,,,2920,\\r\\n17.10.2020,,,2671,\\r\\n18.10.2020,,,2358,\\r\\n19.10.2020,,,2603,\\r\\n20.10.2020,,,2732,\\r\\n21.10.2020,,,2661,\\r\\n22.10.2020,,,2768,\\r\\n23.10.2020,,,2986,\\r\\n24.10.2020,,,2924,\\r\\n25.10.2020,,,2861,\\r\\n26.10.2020,,,2775,\\r\\n27.10.2020,,,2680,\\r\\n28.10.2020,,,2716,\\r\\n29.10.2020,,,2824,\\r\\n30.10.2020,,,2839,\\r\\n31.10.2020,,,2384,\\r\\n01.11.2020,,,2178,\\r\\n02.11.2020,,,1750,\\r\\n03.11.2020,,,1800,\\r\\n04.11.2020,,,1807,\\r\\n05.11.2020,,,2014,\\r\\n06.11.2020,,,1855,\\r\\n07.11.2020,,,1867,\\r\\n08.11.2020,,,1532,\\r\\n09.11.2020,,,1472,\\r\\n10.11.2020,,,1497,\\r\\n11.11.2020,,,1662,\\r\\n12.11.2020,,,1693,\\r\\n13.11.2020,,,1604,\\r\\n14.11.2020,,,2102,\\r\\n15.11.2020,,,2046,\\r\\n16.11.2020,,,2537,\\r\\n17.11.2020,,,2761,\\r\\n18.11.2020,,,2781,\\r\\n19.11.2020,,,3053,\\r\\n20.11.2020,,,3387,\\r\\n21.11.2020,,,3121,\\r\\n22.11.2020,,,3165,\\r\\n23.11.2020,,,3030,\\r\\n24.11.2020,,,3041,\\r\\n25.11.2020,,,2778,\\r\\n26.11.2020,,,2765,\\r\\n27.11.2020,,,2612,\\r\\n28.11.2020,,,2450,\\r\\n29.11.2020,,,2339,\\r\\n30.11.2020,,,2289,\\r\\n01.12.2020,,,2191,\\r\\n02.12.2020,,,2010,\\r\\n03.12.2020,,,2213,\\r\\n04.12.2020,,,2389,\\r\\n05.12.2020,,,2161,\\r\\n06.12.2020,,,2207,\\r\\n07.12.2020,,,2060,\\r\\n08.12.2020,,,1861,\\r\\n09.12.2020,,,1957,\\r\\n10.12.2020,,,2381,\\r\\n11.12.2020,,,2725,\\r\\n12.12.2020,,,2968,\\r\\n13.12.2020,,,3274,\\r\\n14.12.2020,,,3120,\\r\\n15.12.2020,,,3264,\\r\\n16.12.2020,,,3705,\\r\\n17.12.2020,,,4414,\\r\\n18.12.2020,,,4940,\\r\\n19.12.2020,,,5273,\\r\\n20.12.2020,,,5009,\\r\\n21.12.2020,,,4806,\\r\\n22.12.2020,,,4462,\\r\\n23.12.2020,,,4947,\\r\\n24.12.2020,,,5305,\\r\\n25.12.2020,,,5742,\\r\\n26.12.2020,,,4510,\\r\\n27.12.2020,,,4452,\\r\\n28.12.2020,,,4581,\\r\\n29.12.2020,,,5059,\\r\\n30.12.2020,,,5654,\\r\\n31.12.2020,,,5821,\\r\\n01.01.2021,,,5789,\\r\\n02.01.2021,,,4599,\\r\\n03.01.2021,,,4410,\\r\\n04.01.2021,,,4299,\\r\\n05.01.2021,,,4479,\\r\\n06.01.2021,,,4254,\\r\\n07.01.2021,,,4601,\\r\\n08.01.2021,,,4236,\\r\\n09.01.2021,,,5237,\\r\\n10.01.2021,,,4863,\\r\\n11.01.2021,,,4405,\\r\\n12.01.2021,,,4397,\\r\\n13.01.2021,,,4450,\\r\\n14.01.2021,,,4647,\\r\\n15.01.2021,,,5247,\\r\\n16.01.2021,,,4565,\\r\\n17.01.2021,,,4938,\\r\\n18.01.2021,,,4781,\\r\\n19.01.2021,,,4611,\\r\\n20.01.2021,,,4835,\\r\\n21.01.2021,,,4790,\\r\\n22.01.2021,,,5607,\\r\\n23.01.2021,,,4379,\\r\\n24.01.2021,,,4670,\\r\\n25.01.2021,,,4263,\\r\\n26.01.2021,,,4030,\\r\\n27.01.2021,,,3773,\\r\\n28.01.2021,,,3946,\\r\\n29.01.2021,,,4008,\\r\\n30.01.2021,,,3056,\\r\\n31.01.2021,,,4110,\\r\\n01.02.2021,,,4969,\\r\\n02.02.2021,,,4875,\\r\\n03.02.2021,,,4168,\\r\\n04.02.2021,,,4858,\\r\\n05.02.2021,,,4838,\\r\\n06.02.2021,,,4719,\\r\\n07.02.2021,,,5911,\\r\\n08.02.2021,,,5787,\\r\\n09.02.2021,,,5978,\\r\\n10.02.2021,,,7497,\\r\\n11.02.2021,,,8540,\\r\\n12.02.2021,,,9888,\\r\\n13.02.2021,,,9374,\\r\\n14.02.2021,,,8103,\\r\\n15.02.2021,,,7988,\\r\\n16.02.2021,,,7569,\\r\\n17.02.2021,,,7450,\\r\\n18.02.2021,,,6549,\\r\\n19.02.2021,,,5632,\\r\\n20.02.2021,,,5858,\\r\\n21.02.2021,,,5902,\\r\\n22.02.2021,,,5612,\\r\\n23.02.2021,,,4939,\\r\\n24.02.2021,,,4346,\\r\\n25.02.2021,,,4068,\\r\\n26.02.2021,,,3917,\\r\\n27.02.2021,,,4028,\\r\\n28.02.2021,,,4425,\\r\\n01.03.2021,,,3865,\\r\\n02.03.2021,,,3205,\\r\\n03.03.2021,,,3437,\\r\\n04.03.2021,,,3461,\\r\\n05.03.2021,,,3147,\\r\\n06.03.2021,,,2998,\\r\\n07.03.2021,,,3015,\\r\\n08.03.2021,,,2945,\\r\\n09.03.2021,,,2749,\\r\\n10.03.2021,,,3103,\\r\\n11.03.2021,,,3367,\\r\\n12.03.2021,,,3752,\\r\\n13.03.2021,,,3357,\\r\\n14.03.2021,,,3301,\\r\\n15.03.2021,,,3010,\\r\\n16.03.2021,,,2751,\\r\\n17.03.2021,,,3036,\\r\\n\"","export default \"Datum,Gemeldete Fälle,Stationäre Behandlung,Intensivmedizin,gestorben\\n\"","<template lang=\"pug\">\nvue-plotly(v-if=\"!isResizing\" :data=\"dataLines\" :layout=\"layout\" :options=\"options\" @relayout=\"handleRelayout\")\n\n</template>\n\n<script lang=\"ts\">\nimport Papaparse from '@simwrapper/papaparse'\nimport VuePlotly from '@/components/VuePlotly.vue'\nimport { PUBLIC_SVN } from '@/Globals'\n\ninterface City {\n  fromModel: string[]\n  fromCSV: string[]\n  csvLineNames: string[]\n  dateFormatter: Function\n  dateColumn: string\n}\n\nimport berlin from '@/assets/berlin-hospital.csv?raw'\nimport munich from '@/assets/munich-hospital.csv?raw'\nimport jakarta from '@/assets/jakarta-hospital.csv?raw'\nimport cologne from '@/assets/cologne-hospital.csv?raw'\n\nconst csvData = {\n  berlin,\n  munich,\n  jakarta,\n  cologne,\n}\n\nconst reformatDateBerlin = (day: string) => {\n  const pieces = day.split('.')\n  const date = pieces[2] + '-' + pieces[1] + '-' + pieces[0]\n  return date\n}\n\nconst reformatDateMunich = (day: string) => {\n  const pieces = day.split('-')\n  const date = '20' + pieces[2] + '-' + pieces[1] + '-' + pieces[0]\n  return date\n}\n\nconst reformatDateCologne = (day: string) => {\n  const pieces = day.split('-')\n  const date = '20' + pieces[2] + '-' + pieces[1] + '-' + pieces[0]\n  return date\n}\n\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  name: 'HospPlot',\n  components: { VuePlotly },\n  props: {\n    data: { type: Array as PropType<any[]>, required: true },\n    diviData: { type: Array as PropType<any[]>, required: true },\n    logScale: { type: Boolean, required: true },\n    city: { type: String, required: true },\n    endDate: { type: String, required: true },\n    metadata: { type: Object, required: true },\n  },\n  data: () => {\n    const dataDetails = {\n      berlin: {\n        fromModel: ['Seriously Sick', 'Critical'],\n        fromCSV: ['Stationäre Behandlung', 'Intensivmedizin'],\n        csvLineNames: [\n          'Reported: Berlin Hospitalized (Senate)',\n          'Reported: Berlin Intensive Care (Senate)',\n        ],\n        dateFormatter: reformatDateBerlin,\n        dateColumn: 'Datum',\n      },\n      munich: {\n        fromModel: ['Seriously Sick', 'Critical'],\n        fromCSV: ['Stationär'],\n        csvLineNames: ['Reported: Munich Hospitalized'],\n        dateFormatter: reformatDateMunich,\n        dateColumn: 'Tag',\n      },\n      cologne: {\n        fromModel: ['Seriously Sick', 'Critical'],\n        fromCSV: ['Stationäre Behandlung', 'Intensivmedizin'],\n        csvLineNames: ['Reported: Cologne Hospitalized', 'Reported: Cologne Intensive Care'],\n        dateFormatter: reformatDateBerlin,\n        dateColumn: 'Datum',\n      },\n      jakarta: {\n        fromModel: ['Seriously Sick', 'Critical'],\n        fromCSV: ['Intensivmedizin'],\n        csvLineNames: ['Reported: Jakarta Intensive Care'],\n        dateFormatter: reformatDateBerlin,\n        dateColumn: 'Datum',\n      },\n    } as { [id: string]: City }\n\n    return {\n      factor100k: 1,\n      isResizing: false,\n\n      csvData,\n      hospitalCapacity: {\n        berlin: [1252, 1694],\n      } as any,\n\n      extraHospitalData: null as any,\n\n      dataDetails,\n\n      colors: {\n        'Seriously Sick': '#44f',\n        'Cumulative Hospitalized': '#707',\n        Critical: '#707',\n      } as any,\n\n      dataLines: [] as any[],\n      unselectedLines: [] as string[],\n      hospitalSeries: [] as any[],\n      cityDetails: dataDetails.berlin,\n\n      observedHospitalizationConfig: {\n        cologne: {\n          svnPath: 'original-data/hospital-cases/cologne/KoelnAllgemeinpatienten.csv',\n          csvCasesColumn: 'allgemeinpatienten',\n          legendText: 'Reported: Hospitalizations (City)',\n        },\n      } as { [id: string]: { svnPath: string; legendText: string; csvCasesColumn: string } },\n\n      layout: {\n        showlegend: true,\n        autosize: true,\n        legend: {\n          orientation: 'h',\n        },\n        font: {\n          family: 'Roboto,Arial,Helvetica,sans-serif',\n          size: 12,\n          color: '#000',\n        },\n        margin: { t: 5, r: 10, b: 0, l: 60 },\n        xaxis: {\n          //fixedrange: window.innerWidth < 700,\n          fixedrange: true,\n          range: ['2020-02-09', '2020-12-31'],\n          type: 'date',\n        },\n        yaxis: {\n          //fixedrange: window.innerWidth < 700,\n          fixedrange: true,\n          type: 'log',\n          autorange: true,\n          title: 'Hospitalizations / 100k Pop.',\n        },\n        plot_bgcolor: '#f8f8f8',\n        paper_bgcolor: '#f8f8f8',\n      } as any,\n\n      options: {\n        responsive: true,\n        // displayModeBar: true,\n        displaylogo: false,\n        modeBarButtonsToRemove: [\n          'pan2d',\n          'zoom2d',\n          'select2d',\n          'lasso2d',\n          'zoomIn2d',\n          'zoomOut2d',\n          'autoScale2d',\n          'hoverClosestCartesian',\n          'hoverCompareCartesian',\n          'resetScale2d',\n          'toggleSpikelines',\n          'resetViewMapbox',\n        ],\n        toImageButtonOptions: {\n          format: 'svg', // one of png, svg, jpeg, webp\n          filename: 'custom_image',\n          width: 1200,\n          height: 600,\n          scale: 1.0, // Multiply title/legend/axis/canvas sizes by this factor\n        },\n      },\n    }\n  },\n\n  mounted() {\n    this.layout.yaxis.type = this.logScale ? 'log' : 'linear'\n    this.prepareAdditionalHospitalData()\n    this.buildPlot()\n    this.unselectLines()\n    // set end date\n    this.layout.xaxis.range[0] = this.$store.state.graphStartDate\n    this.layout.xaxis.range[1] = this.endDate\n  },\n\n  computed: {},\n  watch: {\n    dataLines: {\n      deep: true,\n      handler: async function () {\n        for (let i = 0; i < this.dataLines.length; i++) {\n          if (\n            this.dataLines[i].visible == 'legendonly' &&\n            !this.unselectedLines.includes(this.dataLines[i].name)\n          ) {\n            this.unselectedLines.push(this.dataLines[i].name)\n          } else if (\n            this.dataLines[i].visible != 'legendonly' &&\n            this.unselectedLines.includes(this.dataLines[i].name)\n          ) {\n            this.unselectedLines.splice(this.unselectedLines.indexOf(this.dataLines[i].name))\n          }\n        }\n\n        const params = Object.assign({}, this.$route.query)\n\n        params['plot-' + this.metadata.abbreviation] = this.unselectedLines\n\n        try {\n          await this.$router.replace({ query: params })\n        } catch (e) {\n          /** this is OK */\n        }\n      },\n    },\n\n    data() {\n      this.updateModelData()\n      this.prepareHospitalData()\n    },\n\n    async '$store.state.isWideMode'() {\n      this.isResizing = true\n      await this.$nextTick()\n      this.layout = Object.assign({}, this.layout)\n      this.isResizing = false\n    },\n\n    logScale() {\n      this.updateScale()\n    },\n\n    city() {\n      this.buildPlot()\n      this.unselectLines()\n    },\n\n    diviData() {\n      this.prepareHospitalData()\n      this.unselectLines()\n    },\n  },\n\n  methods: {\n    buildPlot() {\n      this.cityDetails = this.dataDetails[this.city]\n      this.updateModelData()\n      this.prepareHospitalData()\n    },\n\n    handleRelayout(event: any) {\n      if (event['xaxis.range[0]'] == '2020-02-09' && event['xaxis.range[1]'] == '2020-12-31') {\n        this.updateModelData()\n      }\n    },\n\n    unselectLines() {\n      const query = this.$route.query as any\n      const name = 'plot-' + this.metadata.abbreviation\n\n      if (Object.keys(query).includes(name)) {\n        let nameArray = query[name]\n        if (!Array.isArray(nameArray)) {\n          nameArray = [nameArray]\n        }\n        for (let i = 0; i < nameArray.length; i++) {\n          for (let j = 0; j < this.dataLines.length; j++) {\n            if (this.dataLines[j].name == nameArray[i]) {\n              this.dataLines[j].visible = 'legendonly'\n            }\n          }\n        }\n      }\n    },\n\n    async prepareAdditionalHospitalData() {\n      if (this.observedHospitalizationConfig[this.city]) {\n        const config = this.observedHospitalizationConfig[this.city]\n        const url = PUBLIC_SVN + config.svnPath\n\n        const rawData = await fetch(url).then(async data => await data.text())\n        const csvData = Papaparse.parse(rawData, {\n          header: true,\n          dynamicTyping: false,\n          skipEmptyLines: true,\n        }).data\n\n        // Moved to new hosp plot\n        // const series = {\n        //   name: config.legendText,\n        //   x: csvData.map(row => row.date.split('T')[0]),\n        //   y: csvData.map(row => parseFloat(row[config.csvCasesColumn]) / this.factor100k),\n        //   line: {\n        //     dash: 'dot',\n        //     width: 2,\n        //     color: 'rgb(255,100,100)',\n        //   },\n        // }\n        // this.extraHospitalData = series\n        // this.hospitalSeries.push(series)\n        // this.dataLines.push(series)\n      }\n    },\n\n    updateScale() {\n      this.layout.yaxis.type = this.logScale ? 'log' : 'linear'\n      this.layout = { ...this.layout }\n    },\n\n    prepareHospitalData() {\n      if (!this.cityDetails) return\n\n      this.hospitalSeries = []\n\n      if (this.extraHospitalData) this.hospitalSeries.push(this.extraHospitalData)\n    },\n\n    updateModelData() {\n      if (!this.cityDetails) return\n\n      let modelData = this.data.filter(item => this.cityDetails.fromModel.indexOf(item.name) > -1)\n\n      const sevenDays = 7\n      const susceptible = this.data.filter(item => item.name === 'Susceptible')\n\n      // maybe data is not loaded yet\n      if (!susceptible.length) return\n\n      const totalPopulation = susceptible[0].y[0]\n      this.factor100k = totalPopulation / 100000.0\n\n      if (!modelData.length) return\n\n      // For Berlin we need to *combine* the seriouslySick and critical into one line.\n      for (let i = 0; i < modelData[0].y.length; i++) {\n        modelData[0].y[i] += modelData[1].y[i]\n      }\n\n      modelData = modelData.map(item => {\n        // we are going to mutate the line color (!!!) to ensure all plots on the screen\n        // have the same color for these metrics.\n\n        const midWeekDates = []\n        let infectionRate = []\n\n        infectionRate.push(item.y)\n        midWeekDates.push(item.x)\n\n        for (let i = 0; i < infectionRate[0].length; i++) {\n          infectionRate[0][i] = infectionRate[0][i] / this.factor100k\n        }\n\n        const color = this.colors[item.name]\n        item.line = {\n          dash: 'solid',\n          width: 2,\n          color: color,\n        }\n\n        const trace = {\n          name: 'Model: ' + item.name,\n          visible: true,\n          x: midWeekDates[0],\n          y: infectionRate[0],\n          line: item.line,\n        }\n\n        return trace\n      })\n\n      // Hospital capacity lines\n      if (this.hospitalCapacity[this.city]) {\n        modelData.push(\n          {\n            name: 'Hospital Capacity',\n            visible: true,\n            x: [modelData[0].x[0], modelData[0].x[modelData[0].x.length - 1]],\n            y: [\n              this.hospitalCapacity[this.city][0] / this.factor100k,\n              this.hospitalCapacity[this.city][0] / this.factor100k,\n            ],\n            fill: 'none',\n            marker: { size: 2 },\n            line: {\n              width: 0.5,\n              color: '#707',\n            },\n          },\n          {\n            name: 'Hospital Max Reserve Capacity',\n            visible: true,\n            x: [modelData[0].x[0], modelData[0].x[modelData[0].x.length - 1]],\n            y: [\n              this.hospitalCapacity[this.city][1] / this.factor100k,\n              this.hospitalCapacity[this.city][1] / this.factor100k,\n            ],\n            fill: 'none',\n            marker: { size: 2 },\n            line: {\n              width: 0.5,\n              color: '#707',\n            },\n          }\n        )\n      }\n\n      modelData[0].name = 'Model: Should be Hospitalized'\n\n      this.dataLines = modelData\n      this.dataLines.push(...this.hospitalSeries)\n\n      // console.log({ dataLines: this.dataLines })\n      this.unselectLines()\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@use '@/styles.scss' as *;\n\n@media only screen and (max-width: 640px) {\n}\n</style>\n","<template lang=\"pug\">\nvue-plotly(v-if=\"!isResizing\" :data=\"dataLines\" :layout=\"layout\" :options=\"options\"  @relayout=\"handleRelayout\")\n\n</template>\n\n<script lang=\"ts\">\nimport VuePlotly from '@/components/VuePlotly.vue'\n\nimport { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  name: 'RValuePlot',\n  components: { VuePlotly },\n  props: {\n    data: { type: Array as PropType<any[]>, required: true },\n    rValues: { type: Array as PropType<any[]>, required: true },\n    logScale: { type: Boolean, required: true },\n    endDate: { type: String, required: true },\n    rValueDate: { type: String, required: true },\n    metadata: { type: Object, required: true },\n  },\n\n  data() {\n    return {\n      isResizing: false,\n      color: '#04f',\n      lagDays: 7,\n      dataLines: [] as any[],\n      unselectedLines: [] as string[],\n\n      avg7dayLookup: { date: [], avgR: [] } as { date: string[]; avgR: number[] },\n\n      layout: {\n        autosize: true,\n        showlegend: true,\n        legend: {\n          orientation: 'h',\n        },\n        font: {\n          family: 'Roboto,Arial,Helvetica,sans-serif',\n          size: 12,\n          color: '#000',\n        },\n        margin: { t: 5, r: 10, b: 0, l: 60 },\n        xaxis: {\n          //fixedrange: window.innerWidth < 700,\n          fixedrange: true,\n          range: ['2020-02-09', '2020-12-31'],\n          type: 'date',\n        },\n        yaxis: {\n          // fixedrange: window.innerWidth < 700,\n          fixedrange: true,\n          type: 'linear',\n          autorange: true,\n          // range: this.logScale ? [Math.log10(0.3), Math.log10(2)] : [0, 2],\n          title: 'Multiplier',\n          hoverformat: '.3f',\n        },\n        plot_bgcolor: '#f8f8f8',\n        paper_bgcolor: '#f8f8f8',\n      } as any,\n\n      options: {\n        // displayModeBar: true,\n        displaylogo: false,\n        responsive: true,\n        modeBarButtonsToRemove: [\n          'pan2d',\n          'zoom2d',\n          'select2d',\n          'lasso2d',\n          'zoomIn2d',\n          'zoomOut2d',\n          'autoScale2d',\n          'hoverClosestCartesian',\n          'hoverCompareCartesian',\n          'resetScale2d',\n          'toggleSpikelines',\n          'resetViewMapbox',\n        ],\n        toImageButtonOptions: {\n          format: 'svg', // one of png, svg, jpeg, webp\n          filename: 'r-values',\n          width: 1200,\n          height: 600,\n          scale: 1.0, // Multiply title/legend/axis/canvas sizes by this factor\n        },\n      },\n    }\n  },\n\n  mounted() {\n    this.calculateRvalues()\n    this.updateSummaryRValue()\n    this.unselectLines()\n    // set end date\n    this.layout.xaxis.range[0] = this.$store.state.graphStartDate\n    this.layout.xaxis.range[1] = this.endDate\n  },\n\n  computed: {},\n  watch: {\n    async '$store.state.isWideMode'() {\n      this.isResizing = true\n      await this.$nextTick()\n      this.layout = Object.assign({}, this.layout)\n      this.isResizing = false\n    },\n\n    data() {\n      this.calculateRvalues()\n      this.updateSummaryRValue()\n      this.unselectLines()\n    },\n\n    rValues() {\n      this.calculateRvalues()\n      this.updateSummaryRValue()\n      this.unselectLines()\n    },\n\n    rValueDate() {\n      this.updateSummaryRValue()\n    },\n\n    logScale() {\n      if (this.logScale) {\n        this.layout.yaxis.type = 'log'\n        // this.layout.yaxis.range = [Math.log10(0.4), Math.log10(2.4)]\n      } else {\n        this.layout.yaxis.type = 'linear'\n        // this.layout.yaxis.range = [0, 2]\n      }\n      this.layout = { ...this.layout }\n    },\n\n    dataLines: {\n      deep: true,\n      handler: async function () {\n        for (let i = 0; i < this.dataLines.length; i++) {\n          if (\n            this.dataLines[i].visible == 'legendonly' &&\n            !this.unselectedLines.includes(this.dataLines[i].name)\n          ) {\n            this.unselectedLines.push(this.dataLines[i].name)\n          } else if (\n            this.dataLines[i].visible != 'legendonly' &&\n            this.unselectedLines.includes(this.dataLines[i].name)\n          ) {\n            this.unselectedLines.splice(this.unselectedLines.indexOf(this.dataLines[i].name))\n          }\n        }\n\n        const params = Object.assign({}, this.$route.query)\n        params['plot-' + this.metadata.abbreviation] = this.unselectedLines\n\n        try {\n          await this.$router.replace({ query: params })\n        } catch (e) {\n          /** this is OK */\n        }\n      },\n    },\n  },\n\n  methods: {\n    handleRelayout(event: any) {\n      if (event['xaxis.range[0]'] == '2020-02-09' && event['xaxis.range[1]'] == '2020-12-31') {\n        this.calculateRvalues()\n        this.updateSummaryRValue()\n        this.unselectLines()\n      }\n    },\n\n    updateSummaryRValue() {\n      const index = this.avg7dayLookup.date.indexOf(this.rValueDate)\n      const rValue = index < 0 ? '' : '' + Math.round(1000 * this.avg7dayLookup.avgR[index]) / 1000\n      this.$emit('avgR', rValue)\n    },\n\n    unselectLines() {\n      const query = this.$route.query as any\n      const name = 'plot-' + this.metadata.abbreviation\n\n      if (Object.keys(query).includes(name)) {\n        let nameArray = query[name]\n        if (!Array.isArray(nameArray)) {\n          nameArray = [nameArray]\n        }\n        for (let i = 0; i < nameArray.length; i++) {\n          for (let j = 0; j < this.dataLines.length; j++) {\n            if (this.dataLines[j].name == nameArray[i]) {\n              this.dataLines[j].visible = 'legendonly'\n            }\n          }\n        }\n      }\n    },\n\n    calculateRvalues() {\n      // calculate r-values if pre-calculated versions don't exist\n      if (!this.rValues.length) {\n        this.$emit('method', 'Based on seven-day new infections')\n        this.manuallyCalculateRvalues()\n        return\n      }\n\n      this.$emit('method', this.lagDays + '-day moving average')\n\n      const x: any[] = []\n      const r: any[] = []\n      const avgR = []\n\n      for (const value of this.rValues) {\n        x.push(value.date)\n        r.push(value.rValue)\n      }\n\n      // 0,1,2 *3* 4,5,6\n      const center = Math.floor(this.lagDays / 2)\n\n      for (let index = center; index < x.length - center; index++) {\n        const average =\n          r.slice(index - center, index + center).reduce((a, b) => a + b, 0) / 2 / center\n\n        avgR.push(average)\n      }\n\n      // set end date\n      this.layout.xaxis.range = [this.$store.state.graphStartDate, this.endDate]\n\n      // use pre-calculated r-values\n      this.dataLines = [\n        {\n          name: 'Target: 1.0',\n          visible: true,\n          x: [0, x[x.length - 1]],\n          y: [1.0, 1.0],\n          fill: 'tozeroy',\n          line: {\n            width: 1.0,\n            // color: '#ddbbbb',\n            color: '#bbddbb',\n          },\n        },\n        {\n          name: '7-Day Average R-Value',\n          visible: true,\n          x: x.slice(center),\n          y: avgR,\n          line: {\n            width: 2,\n            color: this.color,\n            shape: 'linear',\n          },\n        },\n        // {\n        //   name: 'Daily R-Value',\n        //   x: x,\n        //   y: r,\n        //   mode: 'markers',\n        //   type: 'scatter',\n        //   marker: { color: '#c44', size: 3 },\n        // },\n      ]\n\n      // save the 7-day average so we can query it later for the summary stats\n      this.avg7dayLookup = { date: x.slice(center), avgR }\n    },\n\n    /**\n     * We are calculating a four day running R-value as our best guess.\n     * Starting on day 4,\n     * - numerator:  past four days of \"newly infected\", which is the difference in Susceptible;\n     * - denominator: divide by the \"newly infected\" number from four days ago\n     */\n    manuallyCalculateRvalues() {\n      // these are not really R values; rather, they are multipliers.  Maybe they are estimates of R as long as lagDays was 4, and we also assume that\n      // that is the serial interval.  kai, oct'20\n\n      if (this.data.length === 0) return\n\n      // set end date\n      this.layout.xaxis.range = [this.$store.state.graphStartDate, this.endDate]\n\n      const susceptible = this.data.filter(item => item.name === 'Susceptible')[0]\n\n      const newlyInfected = []\n      const rValues = []\n\n      for (let i = this.lagDays; i < susceptible.y.length; i++) {\n        // for each day, we compute the difference to lagDays ago.  lagDays is a const.  We start at lagDays, because the difference does not exist for\n        // earlier days.\n        const diffSusceptible = susceptible.y[i - this.lagDays] - susceptible.y[i]\n\n        // we memorize this:\n        newlyInfected.push(diffSusceptible)\n\n        if (i >= this.lagDays * 2) {\n          // take as index the last index of newlyInfected:\n          const index = newlyInfected.length - 1\n\n          // this method computes the, say, 7-day multiplier as dividing the newly infected of the last 7 days by those of 7 days before that (i.e. 8 to 14\n          // earlier).  For that reason, we cannot start before lagDays*2\n          let newR = newlyInfected[index] / newlyInfected[index - this.lagDays]\n          newR = ((newR - 1) * 4) / this.lagDays + 1\n          // (4/lagDays since the serial interval for covid is assumed to be 4 days)\n\n          if (newlyInfected[index] < 100) {\n            // yyyyyy I really do not know why this needs to be \"100\".\n            newR = 1\n          }\n\n          // we memorize this:\n          if (newR) rValues.push(newR)\n        }\n      }\n\n      this.dataLines = [\n        {\n          name: 'Target: 50 per 100,000 per 7 days',\n          visible: true,\n          x: [0, susceptible.x[susceptible.x.length - 1]],\n          y: [1, 1],\n          fill: 'tozeroy',\n          line: {\n            width: 1.0,\n            // color: '#ddbbbb',\n            color: '#bbddbb',\n          },\n        },\n        {\n          name: 'Estimated Multiplier',\n          visible: true,\n          x: susceptible.x.slice(this.lagDays * 2),\n          y: rValues,\n          line: {\n            width: 2,\n            color: this.color,\n            shape: 'linear',\n          },\n        },\n      ]\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n@use '@/styles.scss' as *;\n\n@media only screen and (max-width: 640px) {\n}\n</style>\n"],"names":["berlin","munich","jakarta","cologne","csvData","reformatDateBerlin","day","pieces","reformatDateMunich","_sfc_main$1","defineComponent","VuePlotly","dataDetails","i","params","event","query","name","nameArray","j","config","url","PUBLIC_SVN","rawData","data","Papaparse","modelData","item","susceptible","totalPopulation","midWeekDates","infectionRate","color","_sfc_main","index","rValue","x","r","avgR","value","center","average","a","b","newlyInfected","rValues","diffSusceptible","newR"],"mappings":"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"}